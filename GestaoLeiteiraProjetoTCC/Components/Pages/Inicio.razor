@page "/inicio"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService
@inject IAnimalService AnimalService
@inject IProducaoLeiteiraService ProducaoLeiteiraService

<div class="dashboard-wrapper">
    @if (propriedade != null && animais != null)
    {
        <div class="dashboard-header">
            <div class="header-content">
                <div class="welcome-section">
                    <h1 class="property-name">@propriedade.NomePropriedade</h1>
                    <p class="property-owner">Proprietário: @propriedade.NomeProprietario</p>
                </div>
                <div class="property-info-card">
                    <div class="info-item">
                        <i class="fas fa-map-marker-alt"></i>
                        <span>Município: @propriedade.Localizacao</span>
                    </div>
                    <div class="info-item">
                        <i class="fas fa-ruler-combined"></i>
                        <span>
                            Área total: @propriedade.AreaTotal
                            @if (propriedade.TipoUnidade == 3)
                            {
                                <text> Hectare</text>
                            }
                            else
                            {
                                <text> Alqueire</text>
                            }
                        </span>
                    </div>
                </div>
            </div>
        </div>

        <div class="herd-summary-section">
            <h3 class="section-title">
                <i class="fas fa-cow"></i>
                Resumo do Rebanho
            </h3>
            <div class="main-stats-grid">
                <div class="stat-card total-animals">
                    <div class="stat-icon"><i class="fas fa-paw"></i></div>
                    <div class="stat-content">
                        <div class="stat-number">@totalAnimais</div>
                        <div class="stat-label">Total de Animais</div>
                    </div>
                </div>
                <div class="stat-card total-females">
                    <div class="stat-icon"><i class="fas fa-venus"></i></div>
                    <div class="stat-content">
                        <div class="stat-number">@totalFemeas</div>
                        <div class="stat-label">Total de Fêmeas</div>
                    </div>
                </div>
                <div class="stat-card total-males">
                    <div class="stat-icon"><i class="fas fa-mars"></i></div>
                    <div class="stat-content">
                        <div class="stat-number">@totalMachos</div>
                        <div class="stat-label">Total de Machos</div>
                    </div>
                </div>
            </div>

            <h4 class="sub-section-title">Raio-X das Fêmeas</h4>
            <div class="detailed-stats-grid">
                <div class="stat-card-small lactation">
                    <div class="stat-number">@femeasLactantes</div>
                    <div class="stat-label">Em Lactação</div>
                </div>
                <div class="stat-card-small dry">
                    <div class="stat-number">@vacasSecas</div>
                    <div class="stat-label">Vacas Secas</div>
                </div>
                <div class="stat-card-small heifers">
                    <div class="stat-number">@novilhasPrePrimeiraCria</div>
                    <div class="stat-label">Novilhas (Pré 1ª Cria)</div>
                </div>
                <div class="stat-card-small calves">
                    <div class="stat-number">@bezerras</div>
                    <div class="stat-label">Bezerras</div>
                </div>
                <div class="stat-card-small pregnant">
                    <div class="stat-number">@femeasPrenhas</div>
                    <div class="stat-label">Prenhas</div>
                </div>
            </div>
        </div>

        <div class="dashboard-grid">
            <div class="production-section">
                <h3 class="section-title">
                    <i class="fas fa-chart-line"></i>
                    Produção de Leite do Rebanho
                </h3>
                <div class="production-grid">
                    <div class="production-card">
                        <div class="production-header">
                            <i class="fas fa-calendar-day"></i>
                            <h4>Produção Diária (Total)</h4>
                        </div>
                        <div class="production-value">@producaoHoje.ToString("F2")<span class="unit">L</span></div>
                    </div>
                    <div class="production-card">
                        <div class="production-header">
                            <i class="fas fa-calendar-alt"></i>
                            <h4>Produção Mensal (Total)</h4>
                        </div>
                        <div class="production-value">@producaoTotalMes.ToString("F2")<span class="unit">L</span></div>
                    </div>
                    <div class="production-card">
                        <div class="production-header">
                            <i class="fas fa-calculator"></i>
                            <h4>Média Diária (Mês)</h4>
                        </div>
                        <div class="production-value">@mediaProducaoDiaria.ToString("F2")<span class="unit">L</span></div>
                    </div>
                </div>
            </div>

            <div class="alerts-section">
                <h3 class="section-title">
                    <i class="fas fa-exclamation-triangle"></i>
                    Alertas e Notificações
                </h3>
                <div class="alerts-container">
                    @if (alertas.Any())
                    {
                        @foreach (var alerta in alertas)
                        {
                            <div class="alert-item">
                                <i class="fas fa-warning"></i>
                                <span>@alerta</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-alerts">
                            <i class="fas fa-check-circle"></i>
                            <span>Sem alertas no momento</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Carregando informações da propriedade...</p>
        </div>
    }
</div>

<style>
    :root {
        --primary-dark: #023047;
        --primary-blue: #3a7ca5;
        --light-bg: #f8f9fa;
        --white: #ffffff;
        --text-dark: #333;
        --text-light: #666;
        --shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        --border-radius: 8px;
    }

    * {
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .dashboard-wrapper {
        background: var(--light-bg);
        padding: 20px;
    }

    /* Header Section */
    .dashboard-header {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 20px 25px;
        margin-bottom: 20px;
        box-shadow: var(--shadow);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
        flex-wrap: wrap;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: var(--primary-dark);
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: var(--text-light);
        font-size: 1.1rem;
        margin: 5px 0 0 0;
    }

    .property-info-card {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .info-item {
        display: flex;
        align-items: center;
        gap: 10px;
        color: #555;
        font-weight: 500;
    }

        .info-item i {
            color: var(--primary-blue);
            width: 20px;
            text-align: center;
        }

    /* Section Titles */
    .section-title {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.2rem;
        color: var(--primary-dark);
        margin: 0 0 15px 0;
        font-weight: 600;
    }

        .section-title i {
            color: var(--primary-blue);
        }

    .sub-section-title {
        margin-top: 25px;
        margin-bottom: 15px;
        color: var(--primary-dark);
        font-size: 1.1rem;
        font-weight: 600;
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 5px;
    }

    /* Herd Summary Section */
    .herd-summary-section {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 20px 25px;
        box-shadow: var(--shadow);
        margin-bottom: 20px;
    }

    .main-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .stat-card {
        background: var(--primary-blue);
        color: var(--white);
        border-radius: var(--border-radius);
        padding: 20px;
        display: flex;
        align-items: center;
        gap: 15px;
        transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

        .stat-card:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }

    .stat-icon {
        font-size: 2.5rem;
        opacity: 0.5;
    }

    .stat-content {
        text-align: left;
    }

    .stat-number {
        font-size: 2.2rem;
        font-weight: 700;
        line-height: 1;
    }

    .stat-label {
        font-size: 0.9rem;
        opacity: 0.9;
    }

    .detailed-stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
        gap: 12px;
    }

    .stat-card-small {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        color: var(--primary-dark);
        border-left: 5px solid var(--primary-blue);
        border-radius: var(--border-radius);
        padding: 15px;
        text-align: center;
    }

        .stat-card-small .stat-number {
            font-size: 1.8rem;
        }

        .stat-card-small .stat-label {
            color: var(--text-light);
            opacity: 1;
        }

        .stat-card-small.lactation {
            border-left-color: #3a7ca5;
        }

        .stat-card-small.pregnant {
            border-left-color: #8338ec;
        }

        .stat-card-small.dry {
            border-left-color: #6c757d;
        }

        .stat-card-small.heifers {
            border-left-color: #ffbe0b;
        }

        .stat-card-small.calves {
            border-left-color: #fb5607;
        }

    /* Main Grid Layout */
    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        align-items: start;
    }

    /* Alerts Section */
    .alerts-section, .production-section {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 20px 25px;
        box-shadow: var(--shadow);
        min-height: 350px;
        display: flex;
        flex-direction: column;
    }

    .alerts-container {
        flex: 1;
        overflow-y: auto;
        padding-right: 8px;
    }

    .alert-item {
        display: flex;
        align-items: flex-start;
        gap: 10px;
        background: #fff5f5;
        padding: 12px 15px;
        border-radius: 6px;
        border-left: 4px solid #dc3545;
        color: #721c24;
        font-weight: 500;
        font-size: 0.9rem;
        margin-bottom: 10px;
    }

        .alert-item i {
            color: #dc3545;
            margin-top: 2px;
        }

    .no-alerts {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        height: 100%;
        background: #f8f9fa;
        border-radius: 6px;
        color: var(--text-light);
    }

    /* Production Section */
    .production-grid {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .production-card {
        background: #f1f8ff;
        border-radius: var(--border-radius);
        padding: 15px;
        border-left: 4px solid var(--primary-blue);
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
    }

    .production-header {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-bottom: 8px;
    }

        .production-header h4 {
            color: var(--primary-dark);
            margin: 0;
            font-size: 1rem;
            font-weight: 600;
        }

    .production-value {
        font-size: 1.8rem;
        font-weight: 700;
        color: var(--primary-dark);
    }

        .production-value .unit {
            font-size: 1rem;
            color: var(--text-light);
            font-weight: 500;
            margin-left: 5px;
        }

    /* Loading State */
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 80vh;
        gap: 20px;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary-blue);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Responsive */
    @@media (max-width: 992px) {
        .dashboard-grid

    {
        grid-template-columns: 1fr;
    }

    }

    @@media (max-width: 768px) {
        .header-content

    {
        flex-direction: column;
        align-items: flex-start;
    }

    .welcome-section h1 {
        font-size: 1.8rem;
    }

    }
</style>

@code {
    private Propriedade propriedade;
    private List<Animal> animais;

    // Estatísticas do Rebanho (variáveis renomeadas para clareza)
    private int totalAnimais = 0;
    private int totalFemeas = 0;
    private int totalMachos = 0;
    private int femeasLactantes = 0;
    private int femeasPrenhas = 0;
    private int vacasSecas = 0;
    private int novilhasPrePrimeiraCria = 0; 
    private int bezerras = 0;

    // Estatísticas de Produção
    private double producaoHoje = 0;
    private double producaoTotalMes = 0;
    private double mediaProducaoDiaria = 0;

    // Alertas
    private List<string> alertas = new();

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    private async Task CarregarDados()
    {
        propriedade = PropriedadeService.ObterPropriedadeLogada();

        if (propriedade != null)
        {
            animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(propriedade.Id);
            var animaisAtivos = animais.Where(a => a.Status == "Ativo").ToList();

            // Calcular Resumo do Rebanho
            totalAnimais = animaisAtivos.Count;
            totalFemeas = animaisAtivos.Count(a => a.Sexo == "Fêmea");
            totalMachos = totalAnimais - totalFemeas;

            // Detalhamento das Fêmeas
            // Detalhamento das Fêmeas (lógica com variáveis renomeadas)
            femeasLactantes = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.Lactante);
            femeasPrenhas = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.Prenha);
            vacasSecas = animaisAtivos.Count(a => a.Sexo == "Fêmea" && !a.Lactante && a.CategoriaAnimal == "Vaca");
            novilhasPrePrimeiraCria = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.CategoriaAnimal == "Novilha");
            bezerras = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.CategoriaAnimal == "Bezerra");

            // Calcular Produção
            var hoje = DateTime.Today;
            var primeiroDiaDoMes = new DateTime(hoje.Year, hoje.Month, 1);
            var producoes = await ProducaoLeiteiraService.ObterPorPropriedadeAsync(propriedade.Id);

            producaoHoje = producoes.Where(p => p.Data.Date == hoje).Sum(p => p.Quantidade);
            producaoTotalMes = producoes.Where(p => p.Data.Date >= primeiroDiaDoMes && p.Data.Date <= hoje).Sum(p => p.Quantidade);

            int diasNoMesAteHoje = hoje.Day;
            mediaProducaoDiaria = diasNoMesAteHoje > 0
                ? producaoTotalMes / diasNoMesAteHoje
                : 0;

            // Gerar Alertas
            GerarAlertas(animaisAtivos, producoes, hoje);
        }
        StateHasChanged();
    }

    private void GerarAlertas(List<Animal> animaisAtivos, List<ProducaoLeiteira> producoes, DateTime hoje)
    {
        alertas.Clear();
        var dataLimite = hoje.AddDays(-3);

        var animaisEmLactacao = animaisAtivos.Where(a => a.Lactante).ToList();

        foreach (var animal in animaisEmLactacao)
        {
            bool produziuRecentemente = producoes.Any(p => p.AnimalId == animal.Id && p.Data.Date >= dataLimite);
            if (!produziuRecentemente)
            {
                alertas.Add($"A vaca '{animal.NomeAnimal}' está em lactação mas não tem registro de produção há 3 dias ou mais.");
            }
        }
        // Adicione mais lógicas de alerta aqui conforme necessário
    }
}