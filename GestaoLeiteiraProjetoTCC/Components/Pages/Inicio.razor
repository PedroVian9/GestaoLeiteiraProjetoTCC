@page "/inicio"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService
@inject IAnimalService AnimalService
@inject IProducaoLeiteiraService ProducaoLeiteiraService
@inject IJSRuntime JSRuntime

<div class="dashboard-wrapper">
    @if (propriedade != null && animais != null)
    {
        <div class="property-card">
            <div class="property-info">
                <h2>@propriedade.NomePropriedade</h2>
                <p><strong>Proprietário:</strong> @propriedade.NomeProprietario</p>
                <p><strong>Localização:</strong> @propriedade.Localizacao</p>
                <p>
                    <strong>Área Total:</strong> @propriedade.AreaTotal
                    @(propriedade.TipoUnidade == 1 ? "Alqueire" : "Hectare")
                </p>
            </div>
            <div class="property-total">
                <span class="total-value">@totalAnimais</span>
                <span class="total-label">Animais no Rebanho</span>
            </div>
        </div>

        <div class="animal-analysis-grid">
            <div class="section-card animal-card">
                <div class="animal-card-header">
                    <h3 class="animal-card-title">Rebanho: Fêmeas</h3>
                    <span class="animal-total-badge">@totalFemeas</span>
                </div>
                <div class="animal-category-list">
                    <div class="animal-category-item"><span>Bezerras</span> <span class="category-value">@bezerras</span></div>
                    <div class="animal-category-item"><span>Novilhas</span> <span class="category-value">@novilhas</span></div>
                    <div class="animal-category-item"><span>Vacas</span> <span class="category-value">@vacas</span></div>
                </div>
                <div class="female-status-section">
                    <h4 class="status-title">Status das Fêmeas</h4>
                    <div class="status-grid">
                        <div class="status-item"><span>Em Lactação</span> <strong>@femeasLactantes</strong></div>
                        <div class="status-item"><span>Secas</span> <strong>@vacasSecas</strong></div>
                        <div class="status-item"><span>Prenhas</span> <strong>@femeasPrenhas</strong></div>
                    </div>
                </div>
            </div>

            <div class="section-card animal-card">
                <div class="animal-card-header">
                    <h3 class="animal-card-title">Rebanho: Machos</h3>
                    <span class="animal-total-badge">@totalMachos</span>
                </div>
                <div class="animal-category-list">
                    <div class="animal-category-item"><span>Bezerros</span> <span class="category-value">@bezerros</span></div>
                    <div class="animal-category-item"><span>Novilhos</span> <span class="category-value">@novilhos</span></div>
                    <div class="animal-category-item"><span>Touros</span> <span class="category-value">@touros</span></div>
                </div>
            </div>
        </div>

        <div class="main-grid">
            <div class="section-card">
                <h3 class="section-title">Produção de Leite do Rebanho</h3>
                <div class="production-content">
                    <div class="production-main">
                        <div class="production-today-value">@producaoHoje.ToString("F1") L</div>
                        <div class="production-today-label">Produção Total de Hoje</div>
                        @if (producaoOntem > 0)
                        {
                            var variacao = ((producaoHoje - producaoOntem) / producaoOntem) * 100;
                            <div class="production-comparison @(variacao >= 0 ? "positive" : "negative")">
                                @(variacao >= 0 ? "▲" : "▼")
                                @Math.Abs(variacao).ToString("F1")% em relação a ontem
                            </div>
                        }
                    </div>
                    <div class="production-secondary-stats">
                        <div class="secondary-stat">
                            <span>Total do Rebanho no Mês</span>
                            <strong>@producaoTotalMes.ToString("F1") L</strong>
                        </div>
                        <div class="secondary-stat">
                            <span>Média Diária do Rebanho</span>
                            <strong>@mediaProducaoDiaria.ToString("F1") L</strong>
                        </div>
                        <div class="secondary-stat">
                            <span>Total do Rebanho (Mês Ant.)</span>
                            <strong>@producaoMesAnterior.ToString("F1") L</strong>
                        </div>
                    </div>
                </div>
                <div class="chart-container">
                    <div class="chart-header">
                        <h4 class="chart-title">Produção Diária</h4>
                        <div class="chart-controls">
                            <button class="chart-btn @(periodoSelecionado == 7 ? "active" : "")" @onclick="() => AlterarPeriodo(7)">7 dias</button>
                            <button class="chart-btn @(periodoSelecionado == 15 ? "active" : "")" @onclick="() => AlterarPeriodo(15)">15 dias</button>
                            <button class="chart-btn @(periodoSelecionado == 30 ? "active" : "")" @onclick="() => AlterarPeriodo(30)">30 dias</button>
                        </div>
                    </div>
                    <canvas id="producaoChart" width="400" height="200"></canvas>
                </div>
            </div>

            <div class="section-card">
                <h3 class="section-title">Alertas e Notificações</h3>
                <div class="alerts-container">
                    @if (alertas.Any())
                    {
                        @foreach (var alerta in alertas)
                        {
                            <div class="alert-item">
                                <span class="alert-text">@alerta</span>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-alerts">
                            <span>Nenhum alerta no momento.</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Carregando informações da propriedade...</p>
        </div>
    }
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

<script>
    let producaoChart = null;

    window.criarGraficoProducao = function (labels, dados, mediaDiaria) {
        const ctx = document.getElementById('producaoChart')?.getContext('2d');
        if (!ctx) return; // Adiciona uma verificação de segurança

        if (producaoChart) {
            producaoChart.destroy();
        }

        const linhaMedia = new Array(labels.length).fill(mediaDiaria);

        producaoChart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Produção Diária (L)',
                        data: dados,
                        borderColor: '#023047',
                        backgroundColor: 'rgba(2, 48, 71, 0.1)',
                        borderWidth: 3,
                        fill: true,
                        tension: 0.4,
                        pointBackgroundColor: '#023047',
                        pointBorderColor: '#ffffff',
                        pointBorderWidth: 2,
                        pointRadius: 5,
                        pointHoverRadius: 7
                    },
                    {
                        label: 'Média do Período',
                        data: linhaMedia,
                        borderColor: '#dc3545',
                        borderWidth: 2,
                        borderDash: [5, 5],
                        fill: false,
                        pointRadius: 0,
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                interaction: {
                    intersect: false,
                    mode: 'index'
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            usePointStyle: true,
                            padding: 20,
                            font: { size: 12, weight: '500' }
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(255, 255, 255, 0.95)',
                        titleColor: '#333',
                        bodyColor: '#333',
                        borderColor: '#dee2e6',
                        borderWidth: 1,
                        cornerRadius: 8,
                        displayColors: true,
                        callbacks: {
                            label: function(context) {
                                let label = context.dataset.label || '';
                                if (label) {
                                    label += ': ';
                                }
                                if (context.parsed.y !== null) {
                                    label += `${context.parsed.y.toFixed(1)} L`;
                                }
                                return label;
                            }
                        }
                    }
                },
                scales: {
                    x: {
                        grid: { display: false },
                        ticks: { font: { size: 11 }, color: '#6c757d' }
                    },
                    y: {
                        beginAtZero: true,
                        grid: { color: 'rgba(0,0,0,0.05)' },
                        ticks: {
                            font: { size: 11 },
                            color: '#6c757d',
                            callback: function(value) {
                                return value.toFixed(0) + 'L';
                            }
                        }
                    }
                }
            }
        });
    };
</script>

<style>
    :root {
        --primary-blue: #023047;
        --primary-dark-text: #343a40;
        --light-bg: #f8f9fa;
        --white: #ffffff;
        --text-dark: #333;
        --text-light: #6c757d;
        --border-color: #dee2e6;
        --shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
        --border-radius: 12px;
        --success-color: #198754;
        --danger-color: #dc3545;
        --light-blue-bg: rgba(2, 48, 71, 0.05);
    }

    * {
        box-sizing: border-box;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
    }

    .dashboard-wrapper {
        background: var(--light-bg);
        padding: 24px;
    }

    .section-card {
        background: var(--white);
        border-radius: var(--border-radius);
        padding: 24px;
        box-shadow: var(--shadow);
        border: 1px solid var(--border-color);
        display: flex;
        flex-direction: column;
    }

    .section-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-dark-text);
        margin: 0 0 20px 0;
        padding-bottom: 10px;
        border-bottom: 1px solid var(--border-color);
    }

    .property-card {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 20px;
        background: var(--white);
        border: 1px solid var(--border-color);
        border-radius: var(--border-radius);
        padding: 24px;
        margin-bottom: 24px;
        box-shadow: var(--shadow);
    }

    .property-info h2 {
        font-size: 1.6rem;
        font-weight: 700;
        margin: 0 0 10px 0;
        color: var(--primary-dark-text);
    }

    .property-info p {
        margin: 4px 0;
        color: var(--text-light);
        font-size: 0.95rem;
    }

    .property-total {
        text-align: center;
        background: var(--light-blue-bg);
        padding: 20px 30px;
        border-radius: 12px;
        border: 1px solid var(--border-color);
    }

        .property-total .total-value {
            font-size: 2.5rem;
            font-weight: 700;
            color: var(--primary-blue);
            display: block;
        }

        .property-total .total-label {
            font-size: 0.95rem;
            color: var(--text-light);
        }

    .animal-analysis-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
        margin-bottom: 24px;
    }

    .animal-card-header {
        display: flex;
        align-items: center;
        gap: 12px;
        padding-bottom: 16px;
        margin-bottom: 16px;
        border-bottom: 1px solid var(--border-color);
    }

    .animal-card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--primary-dark-text);
        margin: 0;
    }

    .animal-total-badge {
        margin-left: auto;
        font-weight: 700;
        background-color: var(--light-bg);
        border: 1px solid var(--border-color);
        border-radius: 6px;
        padding: 6px 10px;
        font-size: 0.9rem;
    }

    .animal-category-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        flex-grow: 1; /* Faz com que o card do macho tenha a mesma altura */
    }

    .animal-category-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 10px;
        border-radius: 6px;
    }

        .animal-category-item:nth-child(odd) {
            background-color: var(--light-bg);
        }

        .animal-category-item .category-value {
            font-weight: 700;
            color: var(--primary-dark-text);
        }

    .female-status-section {
        margin-top: 20px;
        padding-top: 16px;
        background-color: var(--light-blue-bg);
        border-radius: 8px;
        margin: 20px -10px -10px -10px;
        padding: 16px;
    }

    .status-title {
        font-size: 0.9rem;
        font-weight: 600;
        text-align: center;
        margin: 0 0 12px 0;
        color: var(--primary-dark-text);
    }

    .status-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        text-align: center;
        gap: 10px;
    }

    .status-item span {
        font-size: 0.85rem;
        color: var(--text-light);
        display: block;
    }

    .status-item strong {
        font-size: 1.2rem;
        color: var(--primary-dark-text);
    }

    .main-grid {
        display: grid;
        grid-template-columns: 1.5fr 1fr;
        gap: 24px;
    }

    .production-content {
        display: flex;
        gap: 24px;
        margin-bottom: 24px;
        border-bottom: 1px solid var(--border-color);
        padding-bottom: 24px;
    }

    .production-main {
        flex: 1;
        text-align: center;
        border-right: 1px solid var(--border-color);
        padding-right: 24px;
    }

    .production-today-value {
        font-size: 3.5rem;
        font-weight: 700;
        color: var(--primary-blue);
        line-height: 1;
    }

    .production-today-label {
        color: var(--text-light);
        margin-top: 8px;
    }

    .production-comparison {
        margin-top: 12px;
        font-weight: 500;
    }

        .production-comparison.positive {
            color: var(--success-color);
        }

        .production-comparison.negative {
            color: var(--danger-color);
        }

    .production-secondary-stats {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 16px;
    }

    .secondary-stat {
        display: flex;
        justify-content: space-between;
        font-size: 1rem;
        color: var(--text-dark);
    }

        .secondary-stat strong {
            font-weight: 700;
        }

    .chart-container {
        width: 100%;
        margin-top: auto;
    }

    .chart-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 16px;
        flex-wrap: wrap;
        gap: 12px;
    }

    .chart-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--primary-dark-text);
        margin: 0;
    }

    .chart-controls {
        display: flex;
        gap: 8px;
    }

    .chart-btn {
        padding: 6px 12px;
        border: 1px solid var(--border-color);
        background: var(--white);
        color: var(--text-dark);
        border-radius: 6px;
        font-size: 0.85rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .chart-btn:hover {
            background: var(--light-bg);
        }

        .chart-btn.active {
            background: var(--primary-blue);
            color: var(--white);
            border-color: var(--primary-blue);
        }

    #producaoChart {
        width: 100% !important;
        height: 250px !important;
    }

    .alerts-container {
        min-height: 350px;
        overflow-y: auto;
        padding-right: 10px;
    }

    .alert-item {
        padding: 12px 16px;
        border-radius: 8px;
        background-color: rgba(220, 53, 69, 0.1);
        border-left: 5px solid var(--danger-color);
        margin-bottom: 12px;
    }

    .alert-text {
        font-size: 0.9rem;
        color: #5d161d;
        font-weight: 500;
    }

    .no-alerts {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 10px;
        height: 100%;
        min-height: 350px;
        color: var(--text-light);
        background: rgba(25, 135, 84, 0.05);
        border-left: 5px solid var(--success-color);
        border-radius: 8px;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 80vh;
        gap: 20px;
    }

    .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid var(--primary-blue);
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    @@media (max-width: 1200px) {
        .main-grid {
            grid-template-columns: 1fr;
        }
    }

    @@media (max-width: 992px) {
        .animal-analysis-grid {
            grid-template-columns: 1fr;
        }

        .production-content {
            flex-direction: column;
        }

        .production-main {
            border-right: none;
            border-bottom: 1px solid var(--border-color);
            padding-right: 0;
            padding-bottom: 24px;
        }

        .chart-header {
            flex-direction: column;
            align-items: flex-start;
        }
    }

    @@media (max-width: 768px) {
        .property-card {
            flex-direction: column;
            align-items: stretch;
        }

        .property-total {
            margin-top: 16px;
        }
    }

    @@media (max-width: 576px) {
        .dashboard-wrapper {
            padding: 16px;
        }

        .chart-controls {
            flex-wrap: wrap;
            width: 100%;
        }

        .chart-btn {
            flex: 1;
            min-width: 70px;
        }

        #producaoChart {
            height: 220px !important;
        }
    }
</style>

@code {
    private Propriedade propriedade;
    private List<Animal> animais;
    private int totalAnimais, totalFemeas, totalMachos, bezerros, bezerras, novilhos, novilhas, vacas, touros;
    private int femeasLactantes, femeasPrenhas, vacasSecas;
    private double producaoHoje, producaoOntem, producaoTotalMes, producaoMesAnterior, mediaProducaoDiaria;
    private int periodoSelecionado = 30;
    private List<ProducaoLeiteira> todasProducoes = new();
    private List<string> alertas = new();
    private bool graficoRenderizado = false;

    protected override async Task OnInitializedAsync()
    {
        await CarregarDados();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Garante que o gráfico seja renderizado apenas após os dados estarem prontos e o componente ter sido renderizado
        if (!graficoRenderizado && todasProducoes.Any())
        {
            await AtualizarGrafico();
            graficoRenderizado = true;
        }
    }

    private async Task CarregarDados()
    {
        propriedade = PropriedadeService.ObterPropriedadeLogada();
        if (propriedade != null)
        {
            animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(propriedade.Id);
            todasProducoes = await ProducaoLeiteiraService.ObterPorPropriedadeAsync(propriedade.Id);

            CalcularEstatisticasAnimais();
            CalcularEstatisticasProducao();
            GerarAlertas(animais.Where(a => a.Status == "Ativo").ToList(), todasProducoes, DateTime.Today);
        }
        StateHasChanged();
    }

    private void CalcularEstatisticasAnimais()
    {
        var animaisAtivos = animais.Where(a => a.Status == "Ativo").ToList();
        totalAnimais = animaisAtivos.Count;
        totalFemeas = animaisAtivos.Count(a => a.Sexo == "Fêmea");
        totalMachos = totalAnimais - totalFemeas;
        bezerros = animaisAtivos.Count(a => a.Sexo == "Macho" && a.CategoriaAnimal == "Bezerro");
        bezerras = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.CategoriaAnimal == "Bezerra");
        novilhos = animaisAtivos.Count(a => a.CategoriaAnimal == "Novilho");
        novilhas = animaisAtivos.Count(a => a.CategoriaAnimal == "Novilha");
        vacas = animaisAtivos.Count(a => a.CategoriaAnimal == "Vaca");
        touros = animaisAtivos.Count(a => a.CategoriaAnimal == "Touro");
        femeasLactantes = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.Lactante);
        femeasPrenhas = animaisAtivos.Count(a => a.Sexo == "Fêmea" && a.Prenha);
        vacasSecas = animaisAtivos.Count(a => a.CategoriaAnimal == "Vaca" && !a.Lactante);
    }

    private void CalcularEstatisticasProducao()
    {
        var hoje = DateTime.Today;
        var ontem = hoje.AddDays(-1);
        var primeiroDiaDoMes = new DateTime(hoje.Year, hoje.Month, 1);
        var mesAnterior = primeiroDiaDoMes.AddMonths(-1);
        var ultimoDiaMesAnterior = primeiroDiaDoMes.AddDays(-1);

        producaoHoje = todasProducoes.Where(p => p.Data.Date == hoje).Sum(p => p.Quantidade);
        producaoOntem = todasProducoes.Where(p => p.Data.Date == ontem).Sum(p => p.Quantidade);
        producaoTotalMes = todasProducoes.Where(p => p.Data.Date >= primeiroDiaDoMes && p.Data.Date <= hoje).Sum(p => p.Quantidade);
        producaoMesAnterior = todasProducoes.Where(p => p.Data.Date >= mesAnterior && p.Data.Date <= ultimoDiaMesAnterior).Sum(p => p.Quantidade);
        mediaProducaoDiaria = hoje.Day > 0 ? producaoTotalMes / hoje.Day : 0;
    }

    private async Task AlterarPeriodo(int novoPeriodo)
    {
        periodoSelecionado = novoPeriodo;
        await AtualizarGrafico();
    }

    private async Task AtualizarGrafico()
    {
        if (todasProducoes == null || !todasProducoes.Any()) return;

        var hoje = DateTime.Today;
        var dataInicio = hoje.AddDays(-(periodoSelecionado - 1));
        var labels = new List<string>();
        var dados = new List<double>();

        for (int i = 0; i < periodoSelecionado; i++)
        {
            var data = dataInicio.AddDays(i);
            var producaoDia = todasProducoes.Where(p => p.Data.Date == data.Date).Sum(p => p.Quantidade);
            labels.Add(data.ToString("dd/MM"));
            dados.Add(producaoDia);
        }

        var mediaPeriodo = dados.Any() ? dados.Average() : 0;
        await JSRuntime.InvokeVoidAsync("criarGraficoProducao", labels.ToArray(), dados.ToArray(), mediaPeriodo);
    }

    private void GerarAlertas(List<Animal> animaisAtivos, List<ProducaoLeiteira> producoes, DateTime hoje)
    {
        alertas.Clear();
        var dataLimite = hoje.AddDays(-3);
        var animaisEmLactacao = animaisAtivos.Where(a => a.Lactante).ToList();

        foreach (var animal in animaisEmLactacao)
        {
            if (!producoes.Any(p => p.AnimalId == animal.Id && p.Data.Date >= dataLimite))
            {
                alertas.Add($"A vaca '{animal.NomeAnimal}' não tem registro de produção há 3 dias ou mais.");
            }
        }

        if (producaoHoje > 0 && mediaProducaoDiaria > 0 && producaoHoje < (mediaProducaoDiaria * 0.8))
        {
            alertas.Add("Atenção: Produção de hoje está significativamente abaixo da média mensal.");
        }
    }
}