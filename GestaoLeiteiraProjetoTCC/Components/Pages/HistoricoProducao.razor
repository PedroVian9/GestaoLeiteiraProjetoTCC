@page "/historico-producao"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject ILactacaoService LactacaoService
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService
@inject IProducaoLeiteiraService ProducaoLeiteiraService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Histórico de Produção</h1>
                <p class="property-owner">Consulte e analise os dados de produção passados</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else
    {
        <div class="filters-container">
            <div class="row">
                <div class="col-md-3">
                    <div class="form-group">
                        <label for="animal-filter">Animal</label>
                        <select id="animal-filter" @bind="animalSelecionadoString" @bind:after="OnAnimalChange" class="form-control">
                            <option value="todos">Todos os animais</option>
                            @if (animais != null)
                            {
                                @foreach (var animal in animais)
                                {
                                    <option value="@animal.Id">@animal.NomeAnimal (@animal.NumeroIdentificador)</option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="col-md-3">
                    <div class="form-group">
                        <label for="lactacao-filter">Lactação</label>
                        <select id="lactacao-filter" @bind="lactacaoSelecionadaString" @bind:after="OnLactacaoChange" class="form-control"
                                disabled="@(animalSelecionadoString == "todos")" title="@(animalSelecionadoString == "todos" ? "Selecione um animal primeiro" : "")">
                            <option value="todas">Todas as lactações</option>
                            @if (lactacoes != null)
                            {
                                @foreach (var lactacao in lactacoes)
                                {
                                    <option value="@lactacao.Id">
                                        @lactacao.DataInicio.ToString("dd/MM/yyyy")
                                        @(lactacao.DataFim.HasValue ? $" - {lactacao.DataFim.Value.ToString("dd/MM/yyyy")}" : " (Ativa)")
                                    </option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="form-group">
                        <label for="data-inicio">Data Início</label>
                        <input id="data-inicio" type="date" @bind="dataInicio" class="form-control" />
                    </div>
                </div>

                <div class="col-md-2">
                    <div class="form-group">
                        <label for="data-fim">Data Fim</label>
                        <input id="data-fim" type="date" @bind="dataFim" class="form-control" />
                    </div>
                </div>

                <div class="col-md-2 d-flex align-items-end">
                    <div class="form-group w-100">
                        <button class="btn btn-primary w-100" @onclick="BuscarProducoes">
                            <i class="fas fa-search"></i> Buscar
                        </button>
                    </div>
                </div>
            </div>
        </div>

        @if (producoesLeiteira != null)
        {
            @if (!producoesLeiteira.Any())
            {
                <div class="empty-message-container">
                    <div class="empty-message">
                        <i class="fas fa-info-circle"></i>
                        <p>Nenhuma produção encontrada para os filtros selecionados.</p>
                    </div>
                </div>
            }
            else
            {
                <div class="summary-container">
                    <div class="row">
                        <div class="col-md-3">
                            <div class="summary-card">
                                <div class="summary-icon"><i class="fas fa-list-ol"></i></div>
                                <div class="summary-text">
                                    <div class="summary-label">Total de Registros</div>
                                    <div class="summary-value">@producoesLeiteira.Count</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="summary-card">
                                <div class="summary-icon"><i class="fas fa-tint"></i></div>
                                <div class="summary-text">
                                    <div class="summary-label">Produção Total</div>
                                    <div class="summary-value">@producoesLeiteira.Sum(p => p.Quantidade).ToString("F2") L</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="summary-card">
                                <div class="summary-icon"><i class="fas fa-chart-line"></i></div>
                                <div class="summary-text">
                                    <div class="summary-label">Média Diária</div>
                                    <div class="summary-value">@(producoesLeiteira.Any() ? producoesLeiteira.Average(p => p.Quantidade).ToString("F2") : "0,00") L</div>
                                </div>
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="summary-card">
                                <div class="summary-icon"><i class="fas fa-calendar-check"></i></div>
                                <div class="summary-text">
                                    <div class="summary-label">Período Analisado</div>
                                    <div class="summary-value period">
                                        @if (producoesLeiteira.Any())
                                        {
                                            var inicio = producoesLeiteira.Min(p => p.Data);
                                            var fim = producoesLeiteira.Max(p => p.Data);
                                            @($"{inicio:dd/MM/yy} - {fim:dd/MM/yy}")
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="table-container">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Data</th>
                                <th>Animal</th>
                                <th>Lactação</th>
                                <th class="text-end">Quantidade (L)</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var producao in producoesLeiteira)
                            {
                                <tr>
                                    <td>@producao.Data.ToString("dd/MM/yyyy")</td>
                                    <td>@ObterNomeAnimal(producao.AnimalId)</td>
                                    <td>@ObterInfoLactacao(producao.LactacaoId)</td>
                                    <td class="text-end">@producao.Quantidade.ToString("F2")</td>
                                </tr>
                            }
                        </tbody>
                        <tfoot>
                            <tr>
                                <td colspan="3"><strong>Total Geral</strong></td>
                                <td class="text-end"><strong>@producoesLeiteira.Sum(p => p.Quantidade).ToString("F2") L</strong></td>
                            </tr>
                        </tfoot>
                    </table>
                </div>
            }
        }
    }
</div>

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* === ESTILOS DO CABEÇALHO === */
    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* === ESTILOS DOS FILTROS === */
    .filters-container {
        background: white;
        padding: 20px 25px;
        border-radius: 8px;
        margin-bottom: 30px;
        border: 1px solid #e0e7ee;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 1rem;
    }

        .form-group label {
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 10px 14px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #3a7ca5;
            background-color: #fff;
            box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.15);
        }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

        select.form-control:disabled {
            background-color: #e9ecef;
            cursor: not-allowed;
        }

    .btn {
        padding: 11px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 15px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .d-flex.align-items-end .form-group {
        margin-bottom: 0;
    }

    /* === ESTILOS DOS CARDS DE RESUMO === */
    .summary-container {
        margin-bottom: 30px;
    }

    .summary-card {
        background: white;
        border: 1px solid #e0e7ee;
        padding: 20px;
        border-radius: 8px;
        text-align: left;
        display: flex;
        align-items: center;
        gap: 15px;
        height: 100%;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .summary-icon {
        font-size: 24px;
        color: #3a7ca5;
    }

    .summary-label {
        font-size: 0.9rem;
        color: #6c757d;
        margin-bottom: 4px;
    }

    .summary-value {
        font-size: 1.5rem;
        font-weight: 700;
        color: #023047;
    }

        .summary-value.period {
            font-size: 1.2rem;
        }

    /* === ESTILOS DA TABELA === */
    .table-container {
        background: white;
        border-radius: 8px;
        overflow: hidden;
        border: 1px solid #e0e7ee;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .table {
        margin-bottom: 0;
        border-collapse: collapse;
        width: 100%;
    }

        .table thead th {
            background-color: #f8f9fa;
            color: #4a5568;
            border: none;
            font-weight: 600;
            padding: 15px;
            text-align: left;
            border-bottom: 2px solid #e0e7ee;
        }

        .table tbody tr {
            border-bottom: 1px solid #e0e7ee;
        }

            .table tbody tr:last-child {
                border-bottom: none;
            }

        .table tbody td {
            padding: 12px 15px;
        }

        .table tfoot tr {
            background-color: #f8f9fa;
            font-weight: bold;
            border-top: 2px solid #e0e7ee;
        }

        .table tfoot td {
            padding: 12px 15px;
        }

    .text-end {
        text-align: right;
    }

    /* === ESTILOS GERAIS (Loading, Empty) === */
    .empty-message-container {
        background-color: white;
        border-radius: 8px;
        padding: 40px;
        border: 1px solid #e0e7ee;
    }

    .empty-message {
        text-align: center;
        color: #6c757d;
    }

        .empty-message i {
            font-size: 2.5rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3a7ca5;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private List<Animal> animais;
    private List<Lactacao> lactacoes = new();
    private List<ProducaoLeiteira> producoesLeiteira;

    // Mudança: usar string para controlar "todos" vs IDs específicos
    private string animalSelecionadoString = "todos";
    private string lactacaoSelecionadaString = "todas";

    private DateTime? dataInicio;
    private DateTime? dataFim;
    private bool carregandoDados = true;
    private Propriedade propriedadeLogada;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            propriedadeLogada = PropriedadeService.ObterPropriedadeLogada();
            if (propriedadeLogada != null)
            {
                animais = await AnimalService.ObterAnimaisQueTiveramLactacao(propriedadeLogada.Id);

                // Carregar todas as lactações de todos os animais
                await CarregarTodasLactacoes();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados iniciais: {ex.Message}");
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarTodasLactacoes()
    {
        try
        {
            var todasLactacoes = new List<Lactacao>();

            if (animais != null)
            {
                foreach (var animal in animais)
                {
                    var lactacoesAnimal = await LactacaoService.ObterLactacoesPorAnimalAsync(animal.Id);
                    todasLactacoes.AddRange(lactacoesAnimal);
                }
            }

            lactacoes = todasLactacoes.OrderByDescending(l => l.DataInicio).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar todas as lactações: {ex.Message}");
        }
    }

    private async Task OnAnimalChange()
    {
        try
        {
            if (animalSelecionadoString == "todos")
            {
                // Carregar todas as lactações
                await CarregarTodasLactacoes();
            }
            else if (int.TryParse(animalSelecionadoString, out var id))
            {
                // Carregar lactações do animal específico
                var listaLactacoes = await LactacaoService.ObterLactacoesPorAnimalAsync(id);
                lactacoes = listaLactacoes.OrderByDescending(l => l.DataInicio).ToList();
            }
            else
            {
                lactacoes = new List<Lactacao>();
            }

            // Reset apenas a lactação selecionada, mas mantém a tabela
            lactacaoSelecionadaString = "todas";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar lactações: {ex.Message}");
        }
    }

    private void OnLactacaoChange()
    {
        // Não resetar os resultados aqui - apenas quando clicar em buscar
        StateHasChanged();
    }

    private async Task BuscarProducoes()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            producoesLeiteira = new List<ProducaoLeiteira>();

            if (animalSelecionadoString == "todos")
            {
                // Buscar produções de todos os animais
                if (lactacaoSelecionadaString == "todas")
                {
                    // Todas as lactações de todos os animais
                    foreach (var lactacao in lactacoes)
                    {
                        var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacao.Id);
                        producoesLeiteira.AddRange(producoesLactacao);
                    }
                }
                else if (int.TryParse(lactacaoSelecionadaString, out var lactacaoId))
                {
                    // Lactação específica (pode ser de qualquer animal)
                    var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
                    producoesLeiteira.AddRange(producoesLactacao);
                }
            }
            else if (int.TryParse(animalSelecionadoString, out var animalId))
            {
                // Animal específico
                if (lactacaoSelecionadaString == "todas")
                {
                    // Todas as lactações do animal específico
                    foreach (var lactacao in lactacoes)
                    {
                        var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacao.Id);
                        producoesLeiteira.AddRange(producoesLactacao);
                    }
                }
                else if (int.TryParse(lactacaoSelecionadaString, out var lactacaoId))
                {
                    // Lactação específica do animal específico
                    var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
                    producoesLeiteira.AddRange(producoesLactacao);
                }
            }

            // Aplicar filtros de data
            if (dataInicio.HasValue)
            {
                producoesLeiteira = producoesLeiteira.Where(p => p.Data.Date >= dataInicio.Value.Date).ToList();
            }

            if (dataFim.HasValue)
            {
                producoesLeiteira = producoesLeiteira.Where(p => p.Data.Date <= dataFim.Value.Date).ToList();
            }

            producoesLeiteira = producoesLeiteira.OrderByDescending(p => p.Data).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produções: {ex.Message}");
            producoesLeiteira = new List<ProducaoLeiteira>();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private string ObterNomeAnimal(int animalId)
    {
        var animal = animais?.FirstOrDefault(a => a.Id == animalId);
        return animal != null ? $"{animal.NomeAnimal} ({animal.NumeroIdentificador})" : $"Animal ID: {animalId}";
    }

    private string ObterInfoLactacao(int lactacaoId)
    {
        var lactacao = lactacoes?.FirstOrDefault(l => l.Id == lactacaoId);
        if (lactacao != null)
        {
            return $"{lactacao.DataInicio:dd/MM/yyyy}" +
                   (lactacao.DataFim.HasValue ? $" - {lactacao.DataFim.Value:dd/MM/yyyy}" : " - Ativa");
        }
        return $"Lactação ID: {lactacaoId}";
    }
}