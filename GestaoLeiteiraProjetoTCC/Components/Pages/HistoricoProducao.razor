@page "/historico-producao"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject ILactacaoService LactacaoService
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService
@inject IProducaoLeiteiraService ProducaoLeiteiraService

<div class="page-container">
    <h3 class="page-title">Histórico de Produção</h3>

    @if (carregandoDados)
    {
            <div class="loading-overlay">
                <div class="spinner"></div>
                <p>Carregando dados...</p>
            </div>
    }
    else
    {
            <!-- Filtros -->
            <div class="filters-container">
                <div class="row">
                    <div class="col-md-3">
                        <label>Animal:</label>
                        <select @bind="animalSelecionadoString" @bind:after="OnAnimalChange" class="form-select">
                            <option value="todos">Todos os animais</option>
                        @if (animais != null)
                        {
                            @foreach (var animal in animais)
                            {
                                            <option value="@animal.Id">@animal.NomeAnimal (@animal.NumeroIdentificador)</option>
                            }
                        }
                        </select>
                    </div>

                    <div class="col-md-3">
                        <label>Lactação:</label>
                        <select @bind="lactacaoSelecionadaString" @bind:after="OnLactacaoChange" class="form-select">
                            <option value="todas">Todas</option>
                        @if (lactacoes != null)
                        {
                            @foreach (var lactacao in lactacoes)
                            {
                                            <option value="@lactacao.Id">
                                    @lactacao.DataInicio.ToString("dd/MM/yyyy")
                                    @(lactacao.DataFim.HasValue ? $" - {lactacao.DataFim.Value.ToString("dd/MM/yyyy")}" : " - Ativa")
                                            </option>
                            }
                        }
                        </select>
                    </div>

                    <div class="col-md-2">
                        <label>Data Início:</label>
                        <input type="date" @bind="dataInicio" class="form-control" />
                    </div>

                    <div class="col-md-2">
                        <label>Data Fim:</label>
                        <input type="date" @bind="dataFim" class="form-control" />
                    </div>

                    <div class="col-md-2 d-flex align-items-end">
                        <button class="btn btn-primary w-100" @onclick="BuscarProducoes">
                            <i class="fas fa-search"></i> Buscar
                        </button>
                    </div>
                </div>
            </div>

            <!-- Tabela de Resultados -->
        @if (producoesLeiteira != null)
        {
            @if (!producoesLeiteira.Any())
            {
                            <div class="empty-message">
                                <i class="fas fa-info-circle"></i>
                                <p>Nenhuma produção encontrada para os filtros selecionados.</p>
                            </div>
            }
            else
            {
                            <!-- Resumo -->
                            <div class="summary-container">
                                <div class="row">
                                    <div class="col-md-3">
                                        <div class="summary-card">
                                            <div class="summary-label">Total de Registros</div>
                                            <div class="summary-value">@producoesLeiteira.Count</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="summary-card">
                                            <div class="summary-label">Produção Total</div>
                                            <div class="summary-value">@producoesLeiteira.Sum(p => p.Quantidade).ToString("F2") L</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="summary-card">
                                            <div class="summary-label">Média Diária</div>
                                            <div class="summary-value">@(producoesLeiteira.Any() ? producoesLeiteira.Average(p => p.Quantidade).ToString("F2") : "0,00") L</div>
                                        </div>
                                    </div>
                                    <div class="col-md-3">
                                        <div class="summary-card">
                                            <div class="summary-label">Período</div>
                                            <div class="summary-value">
                                    @if (producoesLeiteira.Any())
                                    {
                                        var inicio = producoesLeiteira.Min(p => p.Data);
                                        var fim = producoesLeiteira.Max(p => p.Data);
                                        @($"{inicio:dd/MM/yyyy} - {fim:dd/MM/yyyy}")
                                    }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Tabela -->
                            <div class="table-container">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Data</th>
                                            <th>Animal</th>
                                            <th>Lactação</th>
                                            <th>Quantidade (L)</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                            @foreach (var producao in producoesLeiteira.OrderByDescending(p => p.Data))
                            {
                                                <tr>
                                                    <td>@producao.Data.ToString("dd/MM/yyyy")</td>
                                                    <td>@ObterNomeAnimal(producao.AnimalId)</td>
                                                    <td>@ObterInfoLactacao(producao.LactacaoId)</td>
                                                    <td class="text-end">@producao.Quantidade.ToString("F2")</td>
                                                </tr>
                            }
                                    </tbody>
                                    <tfoot>
                                        <tr class="table-info">
                                            <td colspan="3"><strong>Total:</strong></td>
                                            <td class="text-end"><strong>@producoesLeiteira.Sum(p => p.Quantidade).ToString("F2") L</strong></td>
                                            <td></td>
                                        </tr>
                                    </tfoot>
                                </table>
                            </div>
            }
        }
    }
</div>

@code {
    private List<Animal> animais;
    private List<Lactacao> lactacoes = new();
    private List<ProducaoLeiteira> producoesLeiteira;

    // Mudança: usar string para controlar "todos" vs IDs específicos
    private string animalSelecionadoString = "todos";
    private string lactacaoSelecionadaString = "todas";

    private DateTime? dataInicio;
    private DateTime? dataFim;
    private bool carregandoDados = true;
    private Propriedade propriedadeLogada;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            propriedadeLogada = PropriedadeService.ObterPropriedadeLogada();
            if (propriedadeLogada != null)
            {
                animais = await AnimalService.ObterAnimaisQueTiveramLactacao(propriedadeLogada.Id);

                // Carregar todas as lactações de todos os animais
                await CarregarTodasLactacoes();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar dados iniciais: {ex.Message}");
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarTodasLactacoes()
    {
        try
        {
            var todasLactacoes = new List<Lactacao>();

            if (animais != null)
            {
                foreach (var animal in animais)
                {
                    var lactacoesAnimal = await LactacaoService.ObterLactacoesPorAnimalAsync(animal.Id);
                    todasLactacoes.AddRange(lactacoesAnimal);
                }
            }

            lactacoes = todasLactacoes.OrderByDescending(l => l.DataInicio).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar todas as lactações: {ex.Message}");
        }
    }

    private async Task OnAnimalChange()
    {
        try
        {
            if (animalSelecionadoString == "todos")
            {
                // Carregar todas as lactações
                await CarregarTodasLactacoes();
            }
            else if (int.TryParse(animalSelecionadoString, out var id))
            {
                // Carregar lactações do animal específico
                var listaLactacoes = await LactacaoService.ObterLactacoesPorAnimalAsync(id);
                lactacoes = listaLactacoes.OrderByDescending(l => l.DataInicio).ToList();
            }
            else
            {
                lactacoes = new List<Lactacao>();
            }

            // Reset apenas a lactação selecionada, mas mantém a tabela
            lactacaoSelecionadaString = "todas";
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar lactações: {ex.Message}");
        }
    }

    private void OnLactacaoChange()
    {
        // Não resetar os resultados aqui - apenas quando clicar em buscar
        StateHasChanged();
    }

    private async Task BuscarProducoes()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            producoesLeiteira = new List<ProducaoLeiteira>();

            if (animalSelecionadoString == "todos")
            {
                // Buscar produções de todos os animais
                if (lactacaoSelecionadaString == "todas")
                {
                    // Todas as lactações de todos os animais
                    foreach (var lactacao in lactacoes)
                    {
                        var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacao.Id);
                        producoesLeiteira.AddRange(producoesLactacao);
                    }
                }
                else if (int.TryParse(lactacaoSelecionadaString, out var lactacaoId))
                {
                    // Lactação específica (pode ser de qualquer animal)
                    var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
                    producoesLeiteira.AddRange(producoesLactacao);
                }
            }
            else if (int.TryParse(animalSelecionadoString, out var animalId))
            {
                // Animal específico
                if (lactacaoSelecionadaString == "todas")
                {
                    // Todas as lactações do animal específico
                    foreach (var lactacao in lactacoes)
                    {
                        var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacao.Id);
                        producoesLeiteira.AddRange(producoesLactacao);
                    }
                }
                else if (int.TryParse(lactacaoSelecionadaString, out var lactacaoId))
                {
                    // Lactação específica do animal específico
                    var producoesLactacao = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
                    producoesLeiteira.AddRange(producoesLactacao);
                }
            }

            // Aplicar filtros de data
            if (dataInicio.HasValue)
            {
                producoesLeiteira = producoesLeiteira.Where(p => p.Data >= dataInicio.Value).ToList();
            }

            if (dataFim.HasValue)
            {
                producoesLeiteira = producoesLeiteira.Where(p => p.Data <= dataFim.Value).ToList();
            }

            producoesLeiteira = producoesLeiteira.OrderByDescending(p => p.Data).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao buscar produções: {ex.Message}");
            producoesLeiteira = new List<ProducaoLeiteira>();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private string ObterNomeAnimal(int animalId)
    {
        var animal = animais?.FirstOrDefault(a => a.Id == animalId);
        return animal != null ? $"{animal.NomeAnimal} ({animal.NumeroIdentificador})" : $"Animal ID: {animalId}";
    }

    private string ObterInfoLactacao(int lactacaoId)
    {
        var lactacao = lactacoes?.FirstOrDefault(l => l.Id == lactacaoId);
        if (lactacao != null)
        {
            return $"{lactacao.DataInicio:dd/MM/yyyy}" +
                   (lactacao.DataFim.HasValue ? $" - {lactacao.DataFim.Value:dd/MM/yyyy}" : " - Ativa");
        }
        return $"Lactação ID: {lactacaoId}";
    }
}