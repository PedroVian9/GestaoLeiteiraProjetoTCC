@page "/gestacoes"
@using System.Linq
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IGestacaoService GestacaoService
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Controle Reprodutivo</h1>
                <p class="property-owner">Monitore o manejo reprodutivo e os partos do seu rebanho</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
        <div class="mobile-actions-bar">
            <button class="btn-mobile-action" @onclick="AbrirModalFiltros">
                <i class="fas fa-filter"></i> Filtrar e Ordenar
            </button>
            <button class="btn-mobile-action add" @onclick="AbrirModalNovoCiclo">
                <i class="fas fa-plus"></i> Iniciar Manejo Reprodutivo
            </button>
        </div>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (!ciclos.Any())
    {
        <div class="empty-message-container">
            <div class="empty-message">
                <i class="fas fa-heartbeat"></i>
                <p>Nenhum manejo reprodutivo ativo no momento.</p>
                <button class="btn-action add mt-3" @onclick="AbrirModalNovoCiclo">
                    <span class="plus-icon">+</span> Iniciar primeiro manejo reprodutivo
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="filters-container desktop-only">
            <div class="row align-items-end">
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="filtro-nome">Buscar por Vaca</label>
                        <input id="filtro-nome" type="text" class="form-control" placeholder="Nome ou brinco..."
                               @bind="filtroNome" @bind:event="oninput" @bind:after="AplicarFiltrosEOrdenacao" />
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        <label for="ordenacao">Ordenar por</label>
                        <select id="ordenacao" class="form-control" @bind="ordenacaoSelecionada" @bind:after="AplicarFiltrosEOrdenacao">
                            <option value="data_desc">Mais Recentes (Data de Prenhez)</option>
                            <option value="parto_prox">Parto Mais Próximo</option>
                            <option value="nome_asc">Nome da Vaca (A-Z)</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>
        <div class="animal-actions desktop-only">
            <button class="btn-action add" @onclick="AbrirModalNovoCiclo">
                <span class="plus-icon">+</span> Iniciar novo manejo
            </button>
        </div>

        @if (!ciclosFiltrados.Any())
        {
            <div class="empty-message-container">
                <div class="empty-message">
                    <i class="fas fa-search"></i>
                    <p>Nenhum manejo encontrado para os filtros selecionados.</p>
                </div>
            </div>
        }
        else
        {
            <div class="animais-grid">
                @foreach (var ciclo in ciclosFiltrados)
                {
                    <div class="animal-card">
                        <div class="card-header">
                            <span class="animal-name">@ciclo.Vaca?.NomeAnimal (@ciclo.Vaca?.NumeroIdentificador)</span>
                            <span class="badge @(ciclo.Status == "Gestação Ativa" ? "badge-success" : "badge-warning")">@ciclo.Status</span>
                        </div>

                        @if (ciclo.Status == "Gestação Ativa")
                        {
                            var diasCorridos = (DateTime.Today - ciclo.DataConfirmacao.Value).Days;
                            var dataProvavelParto = ciclo.DataConfirmacao.Value.AddDays(283);
                            <div class="card-details">
                                <div class="detail-item"><span class="detail-label">Confirmação Prenhez:</span> <span class="detail-value">@ciclo.DataConfirmacao?.ToString("dd/MM/yyyy")</span></div>
                                <div class="detail-item"><span class="detail-label">Data Provável do Parto:</span> <span class="detail-value">@dataProvavelParto.ToString("dd/MM/yyyy")</span></div>
                                <div class="detail-item"><span class="detail-label">Dias de Gestação:</span> <span class="detail-value">@diasCorridos dias</span></div>
                                <div class="detail-item"><span class="detail-label">Touro:</span> <span class="detail-value">@(ciclo.Touro?.NomeAnimal ?? "Não informado")</span></div>
                            </div>
                        }
                        else // Status "Em Cobertura"
                        {
                            var diasDesdeCobertura = (DateTime.Today - ciclo.DataInicio).Days;
                            <div class="card-details">
                                <div class="detail-item"><span class="detail-label">Data da Cobertura:</span> <span class="detail-value">@ciclo.DataInicio.ToString("dd/MM/yyyy")</span></div>
                                <div class="detail-item"><span class="detail-label">Dias em Cobertura:</span> <span class="detail-value">@diasDesdeCobertura dias</span></div>
                                <div class="detail-item"><span class="detail-label">Tipo:</span> <span class="detail-value">@ciclo.TipoCobertura</span></div>
                                <div class="detail-item"><span class="detail-label">Touro:</span> <span class="detail-value">@(ciclo.Touro?.NomeAnimal ?? "Não informado")</span></div>
                            </div>
                        }

                        <div class="card-actions">
                            <button class="btn-action info" @onclick="() => AbrirModalDetalhes(ciclo)">
                                <i class="fas fa-info-circle"></i> Detalhes
                            </button>
                            @if (ciclo.Status == "Em Cobertura")
                            {
                                <button class="btn-action danger" @onclick="() => AbrirModalRepetirCio(ciclo)">
                                    <i class="fas fa-sync-alt"></i> Repetir Cio
                                </button>
                                <button class="btn-action success" @onclick="() => AbrirModalConfirmarGestacao(ciclo)">
                                    <i class="fas fa-check"></i> Iniciar Gestação
                                </button>
                            }
                            else
                            {
                                <button class="btn-action editar" @onclick="() => AbrirModalResultadoParto(ciclo)">
                                    <i class="fas fa-baby"></i> Finalizar Gestação
                                </button>
                            }
                        </div>
                    </div>
                }
            </div>
        }
    }

    @* Modal 1: Iniciar Novo Manejo Reprodutivo *@
    @if (exibirModalNovoCiclo)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Iniciar Novo Manejo Reprodutivo</h3>
                <EditForm Model="novoCiclo" OnValidSubmit="SalvarNovoCiclo">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="vacaId">Vaca</label>
                        <InputSelect id="vacaId" @bind-Value="novoCiclo.VacaId" class="form-control">
                            <option value="0" disabled selected>Selecione a vaca...</option>
                            @foreach (var vaca in vacasAptas)
                            {
                                <option value="@vaca.Id">@vaca.NomeAnimal (@vaca.NumeroIdentificador)</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => novoCiclo.VacaId)" />
                    </div>
                    <div class="form-grid-2-col">
                        <div class="form-group">
                            <label for="tipoCobertura">Tipo de Cobertura</label>
                            <InputSelect id="tipoCobertura" @bind-Value="novoCiclo.TipoCobertura" class="form-control">
                                <option value="" disabled selected>Selecione o tipo...</option>
                                <option value="Monta Natural">Monta Natural</option>
                                <option value="Inseminação">Inseminação Artificial</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => novoCiclo.TipoCobertura)" />
                        </div>
                        <div class="form-group">
                            <label for="dataInicio">Data da Cobertura</label>
                            <InputDate id="dataInicio" @bind-Value="novoCiclo.DataInicio" class="form-control" />
                            <ValidationMessage For="@(() => novoCiclo.DataInicio)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="scoreCorporal">Escore de Condição Corporal (1-5)</label>
                        <InputSelect id="scoreCorporal" @bind-Value="novoCiclo.ScoreCorporal" class="form-control">
                            <option value="" disabled selected>Selecione o escore...</option>
                            <option value="1">1 (Muito Magra)</option>
                            <option value="2">2 (Magra)</option>
                            <option value="3">3 (Ideal)</option>
                            <option value="4">4 (Gorda)</option>
                            <option value="5">5 (Obesa)</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => novoCiclo.ScoreCorporal)" />
                    </div>
                    <div class="form-group mt-3">
                        <label for="touroId">Touro (Opcional)</label>
                        <InputSelect id="touroId" @bind-Value="novoCiclo.TouroId" class="form-control">
                            <option value="0">Nenhum / Não informado</option>
                            @foreach (var touro in tourosAtivos)
                            {
                                <option value="@touro.Id">@touro.NomeAnimal (@touro.NumeroIdentificador)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Salvar Manejo</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @* Modal 2: Histórico/Detalhes da Vaca *@
    @if (exibirModalDetalhes)
    {
        var vaca = cicloParaAcao.Vaca;
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Detalhes de @vaca.NomeAnimal</h3>
                <div class="details-section">
                    <h4><i class="fas fa-paw"></i> Manejo Reprodutivo Atual</h4>
                    <div class="details-list">
                        <div><span>Status:</span> <strong>@cicloParaAcao.Status</strong></div>
                        <div><span>Data da Cobertura:</span> <strong>@cicloParaAcao.DataInicio.ToString("dd/MM/yyyy")</strong></div>
                        <div><span>Escore Corporal (na cobertura):</span> <strong>@(cicloParaAcao.ScoreCorporal.HasValue ? cicloParaAcao.ScoreCorporal.Value.ToString("F0") : "Não informado")</strong></div>
                        <div><span>Tipo:</span> <strong>@cicloParaAcao.TipoCobertura</strong></div>
                        <div><span>Touro:</span> <strong>@(cicloParaAcao.Touro?.NomeAnimal ?? "Não informado")</strong></div>
                        @if (cicloParaAcao.Status == "Gestação Ativa")
                        {
                            var diasGestacao = (DateTime.Today - cicloParaAcao.DataConfirmacao.Value).Days;
                            var previsaoParto = cicloParaAcao.DataConfirmacao.Value.AddDays(283);
                            var diasRestantes = (previsaoParto - DateTime.Today).Days;

                            <div><span>Confirmação de Prenhez:</span> <strong>@cicloParaAcao.DataConfirmacao?.ToString("dd/MM/yyyy")</strong></div>
                            <div><span>Dias de Gestação:</span> <strong>@diasGestacao dias</strong></div>
                            <div><span>Previsão de Parto:</span> <strong>@previsaoParto.ToString("dd/MM/yyyy")</strong></div>
                            <div><span>Dias Restantes (aprox.):</span> <strong>@(diasRestantes > 0 ? diasRestantes : 0) dias</strong></div>
                        }
                    </div>
                </div>
                <div class="details-section">
                    <h4><i class="fas fa-history"></i> Histórico de Vida</h4>
                    <div class="details-grid">
                        <div class="detail-box">
                            <span class="detail-box-value">@vaca.NumeroDePartos</span>
                            <span class="detail-box-label">Partos Totais</span>
                        </div>
                        <div class="detail-box">
                            <span class="detail-box-value">@vaca.NumeroDeNascimortos</span>
                            <span class="detail-box-label">Nascidos Mortos</span>
                        </div>
                        <div class="detail-box">
                            <span class="detail-box-value">@vaca.NumeroDeAbortos</span>
                            <span class="detail-box-label">Abortos</span>
                        </div>
                    </div>
                    <p class="detail-line"><strong>Último evento reprodutivo:</strong> @(vaca.DataUltimoParto?.ToString("dd/MM/yyyy") ?? "Nenhum registro")</p>
                </div>
                <div class="footer-actions" style="justify-content: center;">
                    <button type="button" class="btn btn-primary" @onclick="FecharTodosModais">Fechar</button>
                </div>
            </div>
        </div>
    }

    @* Modal 3: Confirmar Início da Gestação *@
    @if (exibirModalConfirmarGestacao)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Confirmar Gestação</h3>
                <p>Confirme a data em que a gestação de <strong>@cicloParaAcao.Vaca.NomeAnimal</strong> foi diagnosticada como positiva.</p>
                <div class="form-group">
                    <label for="dataConfirmacao">Data da Confirmação</label>
                    <InputDate id="dataConfirmacao" @bind-Value="dataConfirmacao" class="form-control" />
                </div>
                <div class="footer-actions">
                    <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarGestacao">Confirmar</button>
                </div>
            </div>
        </div>
    }

    @* Modal 4: Escolher Resultado do Parto *@
    @if (exibirModalResultadoParto)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Qual foi o resultado da gestação?</h3>
                <p class="text-center text-muted">Selecione uma das opções abaixo para a gestação de <strong>@cicloParaAcao.Vaca?.NomeAnimal</strong>.</p>
                <div class="outcome-actions">
                    <button class="btn-outcome" @onclick='() => PrepararConfirmacaoResultado("Vivo")'><i class="fas fa-check-circle"></i> Nascido Vivo</button>
                    <button class="btn-outcome" @onclick='() => PrepararConfirmacaoResultado("Nascido Morto")'><i class="fas fa-heart-broken"></i> Nascido Morto</button>
                    <button class="btn-outcome" @onclick='() => PrepararConfirmacaoResultado("Aborto")'><i class="fas fa-exclamation-triangle"></i> Aborto</button>
                </div>
                <div class="footer-actions" style="justify-content: center;">
                    <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                </div>
            </div>
        </div>
    }

    @* Modal 5: Confirmar Ação de Finalização *@
    @if (exibirModalConfirmarResultado)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Confirmar Ação</h3>
                <p class="text-center" style="font-size: 1.1rem; margin: 25px 0;">
                    Você confirma que o resultado da gestação de <strong>@cicloParaAcao.Vaca?.NomeAnimal</strong> foi <strong>@resultadoPartoSelecionado</strong>?
                </p>
                <div class="footer-actions">
                    <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarResultado">Confirmar</button>
                </div>
            </div>
        </div>
    }

    @* Modal 6: Finalizar Gestação e Cadastrar Cria *@
    @if (exibirModalCadastroCria)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Registrar Nascimento (Mãe: @cicloParaAcao.Vaca?.NomeAnimal)</h3>
                <div class="alert alert-info">
                    <strong>Vínculos de Parentesco:</strong><br>
                    Mãe: @cicloParaAcao.Vaca?.NomeAnimal (@cicloParaAcao.Vaca?.NumeroIdentificador)<br>
                    Pai: @(cicloParaAcao.Touro?.NomeAnimal ?? "Não informado")
                </div>
                <EditForm Model="novaCria" OnValidSubmit="SalvarCriaEFinalizarGestacao">
                    <DataAnnotationsValidator />
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nomeAnimalCria">Nome da Cria</label>
                            <InputText id="nomeAnimalCria" @bind-Value="novaCria.NomeAnimal" class="form-control" placeholder="Ex: Mimosa Filha" />
                            <ValidationMessage For="@(() => novaCria.NomeAnimal)" />
                        </div>
                        <div class="form-group">
                            <label for="numeroIdentificadorCria">Brinco / RFID</label>
                            <InputText id="numeroIdentificadorCria" @bind-Value="novaCria.NumeroIdentificador" class="form-control" placeholder="Ex: 1234" />
                            <ValidationMessage For="@(() => novaCria.NumeroIdentificador)" />
                        </div>
                    </div>
                    <div class="form-grid-2-col" style="margin-top: 1rem;">
                        <div class="form-group">
                            <label for="sexoCria">Sexo</label>
                            <InputSelect id="sexoCria" @bind-Value="novaCria.Sexo" class="form-control">
                                <option value="" disabled selected>Selecione o sexo...</option>
                                <option value="Macho">Macho</option>
                                <option value="Fêmea">Fêmea</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => novaCria.Sexo)" />
                        </div>
                        <div class="form-group">
                            <label for="dataNascimentoCria">Data de Nascimento</label>
                            <InputDate id="dataNascimentoCria" @bind-Value="novaCria.DataNascimento" class="form-control" />
                            <ValidationMessage For="@(() => novaCria.DataNascimento)" />
                        </div>
                    </div>
                    <div class="form-group mt-3">
                        <label for="pesoNascimentoCria">Peso ao Nascer (kg)</label>
                        <InputNumber id="pesoNascimentoCria" @bind-Value="novaCria.PesoNascimento" class="form-control" placeholder="Ex: 35,5" />
                        <ValidationMessage For="@(() => novaCria.PesoNascimento)" />
                    </div>
                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Registrar Nascimento</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }

    @* Modal 7: Confirmação de Perda (Nascimorto/Aborto) *@
    @if (exibirModalLamento)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Confirmação</h3>
                <p class="text-center" style="font-size: 1.1rem; margin: 25px 0;">
                    Lamentamos o ocorrido. A gestação de <strong>@cicloParaAcao.Vaca?.NomeAnimal</strong> será finalizada com o status selecionado.
                </p>
                <div class="footer-actions" style="justify-content: center;">
                    <button type="button" class="btn btn-primary" @onclick="ConfirmarFinalizacaoSemCria">OK</button>
                </div>
            </div>
        </div>
    }

    @* Modal 8: Filtros (Mobile) *@
    @if (exibirModalFiltros)
    {
        <div class="modal-overlay" @onclick="FecharModalFiltros">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Filtrar e Ordenar</h3>
                <div class="form-group">
                    <label for="filtro-nome-modal">Buscar por Vaca</label>
                    <input id="filtro-nome-modal" type="text" class="form-control" placeholder="Nome ou brinco..." @bind="filtroNome" />
                </div>
                <div class="form-group">
                    <label for="ordenacao-modal">Ordenar por</label>
                    <select id="ordenacao-modal" class="form-control" @bind="ordenacaoSelecionada">
                        <option value="data_desc">Mais Recentes</option>
                        <option value="parto_prox">Parto Mais Próximo</option>
                        <option value="nome_asc">Nome da Vaca (A-Z)</option>
                    </select>
                </div>
                <div class="footer-actions">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalFiltros">Cancelar</button>
                    <button type="button" class="btn btn-primary" @onclick="AplicarEFecharModalFiltros">Aplicar</button>
                </div>
            </div>
        </div>
    }

    @* Modal 9: Repetir Cio (NOVO MODAL) *@
    @if (exibirModalRepetirCio)
    {
        <div class="modal-overlay" @onclick="FecharTodosModais">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Repetir Cobertura para @cicloParaAcao.Vaca?.NomeAnimal</h3>
                <EditForm Model="cicloParaRepetir" OnValidSubmit="SalvarRepeticaoCio">
                    <DataAnnotationsValidator />
                    <div class="form-grid-2-col">
                        <div class="form-group">
                            <label for="tipoCoberturaRepetir">Tipo de Cobertura</label>
                            <InputSelect id="tipoCoberturaRepetir" @bind-Value="cicloParaRepetir.TipoCobertura" class="form-control">
                                <option value="" disabled selected>Selecione o tipo...</option>
                                <option value="Monta Natural">Monta Natural</option>
                                <option value="Inseminação">Inseminação Artificial</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => cicloParaRepetir.TipoCobertura)" />
                        </div>
                        <div class="form-group">
                            <label for="dataInicioRepetir">Nova Data da Cobertura</label>
                            <InputDate id="dataInicioRepetir" @bind-Value="cicloParaRepetir.DataInicio" class="form-control" />
                            <ValidationMessage For="@(() => cicloParaRepetir.DataInicio)" />
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="scoreCorporalRepetir">Escore de Condição Corporal (1-5)</label>
                        <InputSelect id="scoreCorporalRepetir" @bind-Value="cicloParaRepetir.ScoreCorporal" class="form-control">
                            <option value="" disabled selected>Selecione o escore...</option>
                            <option value="1">1 (Muito Magra)</option>
                            <option value="2">2 (Magra)</option>
                            <option value="3">3 (Ideal)</option>
                            <option value="4">4 (Gorda)</option>
                            <option value="5">5 (Obesa)</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => cicloParaRepetir.ScoreCorporal)" />
                    </div>
                    <div class="form-group mt-3">
                        <label for="touroIdRepetir">Touro (Opcional)</label>
                        <InputSelect id="touroIdRepetir" @bind-Value="cicloParaRepetir.TouroId" class="form-control">
                            <option value="0">Nenhum / Não informado</option>
                            @foreach (var touro in tourosAtivos)
                            {
                                <option value="@touro.Id">@touro.NomeAnimal (@touro.NumeroIdentificador)</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharTodosModais">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Salvar Nova Cobertura</button>
                    </div>
                </EditForm>
            </div>
        </div>
    }
</div>

<style>
    /* Estilos gerais */
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .detail-item-full {
        grid-column: 1 / -1;
    }

    .animal-actions {
        margin-bottom: 20px;
        display: flex;
        justify-content: flex-end;
    }

    .filters-container {
        background: white;
        padding: 15px 25px 5px 25px;
        border-radius: 8px;
        margin-bottom: 30px;
        border: 1px solid #e0e7ee;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

        .filters-container .row {
            display: flex;
            flex-wrap: wrap;
            margin-left: -15px;
            margin-right: -15px;
        }

        .filters-container .col-md-6 {
            flex: 0 0 50%;
            max-width: 50%;
            padding-left: 15px;
            padding-right: 15px;
        }

        .filters-container .align-items-end {
            align-items: end;
        }

    .animais-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
        gap: 20px;
    }

    .animal-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        padding: 20px;
        border-left: 5px solid #3a7ca5;
        display: flex;
        flex-direction: column;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .plus-icon {
        margin-right: 8px;
        font-weight: bold;
        font-size: 18px;
    }

    .animal-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .card-details {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 8px 20px;
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        flex-wrap: wrap;
    }

    .detail-label {
        font-weight: 500;
        color: #555;
    }

    .detail-value {
        color: #333;
        font-weight: 600;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: auto;
        padding-top: 15px;
    }

    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
        transition: opacity 0.2s;
    }

        .btn-action.add {
            background-color: #8a5a44;
            color: white;
        }

        .btn-action.editar {
            background-color: #17a2b8;
            color: white;
        }

        .btn-action.success {
            background-color: #28a745;
            color: white;
        }

        .btn-action.info {
            background-color: #6c757d;
            color: white;
        }

        .btn-action.danger {
            background-color: #ffc107;
            color: #212529;
        }

        .btn-action:hover {
            opacity: 0.9;
        }

    .outcome-actions {
        display: flex;
        flex-direction: column;
        gap: 15px;
        margin: 25px 0;
    }

    .btn-outcome {
        padding: 18px 25px;
        border: 1px solid #ccc;
        background-color: #f8f9fa;
        color: #333;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        transition: all 0.2s ease;
    }

        .btn-outcome:hover {
            background-color: #e9ecef;
            border-color: #adb5bd;
            transform: translateY(-2px);
        }

        .btn-outcome i {
            color: #6c757d;
        }

    .text-center {
        text-align: center;
    }

    .text-muted {
        color: #6c757d;
    }

    .empty-message-container {
        background-color: white;
        border-radius: 8px;
        padding: 40px;
        border: 1px solid #e0e7ee;
        margin-top: 20px;
    }

    .empty-message {
        text-align: center;
        color: #6c757d;
    }

        .empty-message i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1060;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .alert.alert-info {
        background-color: #e2f3f5;
        border-color: #bdedf3;
        color: #31708f;
        padding: 15px;
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-content {
        background-color: #ffffff;
        padding: 25px 35px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 650px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            font-size: 24px;
            font-weight: 600;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e7ee;
            margin-bottom: 25px;
            text-align: center;
        }

    .details-section {
        margin-bottom: 25px;
    }

        .details-section h4 {
            font-size: 1.1rem;
            color: #3a7ca5;
            border-bottom: 2px solid #3a7ca5;
            padding-bottom: 8px;
            margin-bottom: 15px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

    .details-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
        font-size: 1rem;
    }

        .details-list div {
            display: flex;
            justify-content: space-between;
        }

        .details-list span {
            color: #6c757d;
        }

        .details-list strong {
            color: #343a40;
        }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 20px;
    }

        .form-group label {
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #3a7ca5;
            background-color: #fff;
            box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.15);
        }

    .form-grid, .form-grid-2-col {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
    }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e0e7ee;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .validation-message {
        color: #e53e3e;
        font-size: 12px;
        margin-top: 4px;
    }

    .badge {
        padding: 5px 10px;
        border-radius: 12px;
        font-size: 0.8rem;
        font-weight: 600;
    }

    .badge-success {
        background-color: #d4edda;
        color: #155724;
    }

    .badge-warning {
        background-color: #fff3cd;
        color: #856404;
    }

    .details-grid {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-bottom: 20px;
        text-align: center;
    }

    .detail-box {
        background-color: #f8f9fa;
        padding: 15px;
        border-radius: 8px;
    }

    .detail-box-value {
        font-size: 2rem;
        font-weight: 700;
        color: #023047;
        display: block;
    }

    .detail-box-label {
        font-size: 0.9rem;
        color: #6c757d;
    }

    .detail-line {
        margin-top: 20px;
        font-size: 1rem;
    }

    .mobile-actions-bar {
        display: none;
    }

    @@media (max-width: 768px) {
        body, html {
            padding-top: 107px;
        }

        .page-container {
            padding: 0 10px 10px 10px;
        }

        .dashboard-header {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            z-index: 1010;
            border-radius: 0;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            padding: 0;
            display: flex;
            flex-direction: column;
            background: white;
        }

        .header-content {
            padding: 10px 15px;
        }

        .welcome-section h1 {
            font-size: 1.5rem;
        }

        .property-owner {
            display: none;
        }

        .header-date-section {
            padding: 5px 10px;
            font-size: 0.8rem;
        }

        .mobile-actions-bar {
            display: flex;
            gap: 10px;
            padding: 10px 15px;
            background-color: #f8f9fa;
            border-top: 1px solid #e0e7ee;
            width: 100%;
        }

        .btn-mobile-action {
            flex: 1;
            padding: 10px;
            border-radius: 8px;
            border: 1px solid #cbd5e0;
            background-color: #fff;
            color: #4a5568;
            font-size: 0.8rem;
            font-weight: 600;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }

            .btn-mobile-action.add {
                background-color: #8a5a44;
                color: white;
                border-color: #8a5a44;
            }

        .desktop-only {
            display: none;
        }

        .animais-grid {
            grid-template-columns: 1fr;
            gap: 15px;
            padding-top: 0;
        }

        .animal-card {
            padding: 15px;
        }

        .animal-name {
            font-size: 1.1rem;
        }

        .card-details {
            grid-template-columns: 1fr;
            gap: 5px;
        }

        .detail-item {
            flex-direction: column;
            align-items: flex-start;
        }

        .detail-label {
            font-size: 0.8rem;
            color: #6c757d;
        }

        .detail-value {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .modal-content .form-group {
            margin-bottom: 1rem;
        }

        .form-grid, .form-grid-2-col {
            grid-template-columns: 1fr;
        }

        .details-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<Gestacao> ciclos = new();
    private List<Gestacao> ciclosFiltrados = new();
    private Gestacao novoCiclo = new();
    private Gestacao cicloParaAcao;
    private Animal novaCria = new();
    private List<Animal> todosAnimais = new();
    private List<Animal> vacasAptas = new();
    private List<Animal> tourosAtivos = new();

    private bool exibirModalNovoCiclo = false;
    private bool exibirModalDetalhes = false;
    private bool exibirModalConfirmarGestacao = false;
    private bool exibirModalResultadoParto = false;
    private bool exibirModalConfirmarResultado = false;
    private bool exibirModalCadastroCria = false;
    private bool exibirModalLamento = false;
    private bool exibirModalFiltros = false;
    private bool carregandoDados = true;
    private int propriedadeId;

    // NOVAS VARIÁVEIS DE ESTADO
    private bool exibirModalRepetirCio = false;
    private Gestacao cicloParaRepetir = new();

    private string filtroNome = string.Empty;
    private string ordenacaoSelecionada = "data_desc";
    private string statusFinalizacao = "";
    private string resultadoPartoSelecionado = "";
    private DateTime dataConfirmacao = DateTime.Today;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            var propriedade = PropriedadeService.ObterPropriedadeLogada();
            propriedadeId = propriedade.Id;
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }

    private async Task CarregarDados()
    {
        todosAnimais = await AnimalService.ObterAnimaisDaPropriedadeAsync(propriedadeId);
        ciclos = await GestacaoService.ObterCiclosAtivos(propriedadeId);

        foreach (var ciclo in ciclos)
        {
            ciclo.Vaca = todosAnimais.FirstOrDefault(a => a.Id == ciclo.VacaId);
            if (ciclo.TouroId.HasValue)
            {
                ciclo.Touro = todosAnimais.FirstOrDefault(a => a.Id == ciclo.TouroId);
            }
        }

        vacasAptas = await AnimalService.ObterVacasAptasParaGestacao(propriedadeId);
        tourosAtivos = await AnimalService.ObterTourosAtivos(propriedadeId);
        AplicarFiltrosEOrdenacao();
    }

    private void AplicarFiltrosEOrdenacao()
    {
        IEnumerable<Gestacao> query = ciclos;
        if (!string.IsNullOrWhiteSpace(filtroNome))
        {
            query = query.Where(g => g.Vaca != null &&
              (g.Vaca.NomeAnimal.Contains(filtroNome, StringComparison.OrdinalIgnoreCase) ||
               g.Vaca.NumeroIdentificador.Contains(filtroNome, StringComparison.OrdinalIgnoreCase)));
        }

        switch (ordenacaoSelecionada)
        {
            case "nome_asc": query = query.OrderBy(g => g.Vaca?.NomeAnimal); break;
            case "parto_prox": query = query.Where(g => g.Status == "Gestação Ativa" && g.DataConfirmacao.HasValue).OrderBy(g => g.DataConfirmacao.Value.AddDays(283)); break;
            case "data_desc": default: query = query.OrderByDescending(g => g.DataInicio); break;
        }
        ciclosFiltrados = query.ToList();
    }

    private void AbrirModalNovoCiclo()
    {
        novoCiclo = new Gestacao { DataInicio = DateTime.Today };
        exibirModalNovoCiclo = true;
    }

    private async Task SalvarNovoCiclo()
    {
        if (novoCiclo.VacaId == 0 || string.IsNullOrEmpty(novoCiclo.TipoCobertura)) return;
        try
        {
            carregandoDados = true;
            exibirModalNovoCiclo = false;
            if (novoCiclo.TouroId == 0) novoCiclo.TouroId = null;
            await GestacaoService.IniciarCicloAsync(novoCiclo);
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }

    private void AbrirModalDetalhes(Gestacao ciclo)
    {
        cicloParaAcao = ciclo;
        exibirModalDetalhes = true;
    }

    private void AbrirModalConfirmarGestacao(Gestacao ciclo)
    {
        cicloParaAcao = ciclo;
        dataConfirmacao = DateTime.Today;
        exibirModalConfirmarGestacao = true;
    }

    private async Task ConfirmarGestacao()
    {
        try
        {
            carregandoDados = true;
            exibirModalConfirmarGestacao = false;
            await GestacaoService.ConfirmarGestacaoAsync(cicloParaAcao.Id, dataConfirmacao);
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }

    private void AbrirModalResultadoParto(Gestacao ciclo)
    {
        cicloParaAcao = ciclo;
        exibirModalResultadoParto = true;
    }

    private void PrepararConfirmacaoResultado(string resultado)
    {
        resultadoPartoSelecionado = resultado;
        exibirModalResultadoParto = false;
        exibirModalConfirmarResultado = true;
    }

    private void ConfirmarResultado()
    {
        exibirModalConfirmarResultado = false;
        HandleResultadoParto(resultadoPartoSelecionado);
    }

    private void HandleResultadoParto(string resultado)
    {
        if (resultado == "Vivo")
        {
            novaCria = new Animal
                {
                    PropriedadeId = propriedadeId,
                    DataNascimento = DateTime.Today,
                    Status = "Ativo",
                    MaeId = cicloParaAcao.VacaId,
                    PaiId = cicloParaAcao.TouroId
                };
            exibirModalCadastroCria = true;
        }
        else
        {
            statusFinalizacao = resultado;
            exibirModalLamento = true;
        }
    }

    private async Task SalvarCriaEFinalizarGestacao()
    {
        try
        {
            carregandoDados = true;
            exibirModalCadastroCria = false;

            if (novaCria.Sexo == "Macho") { novaCria.CategoriaAnimal = "Bezerro"; }
            else { novaCria.CategoriaAnimal = "Bezerra"; }

            await GestacaoService.FinalizarGestacaoComCriaVivaAsync(cicloParaAcao.Id, novaCria);
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }

    private async Task ConfirmarFinalizacaoSemCria()
    {
        string statusFinal = statusFinalizacao == "Aborto" ? "Finalizada - Aborto" : "Finalizada - Nascimorto";
        try
        {
            carregandoDados = true;
            exibirModalLamento = false;
            await GestacaoService.FinalizarGestacaoSemCriaVivaAsync(cicloParaAcao.Id, statusFinal);
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }

    private void AbrirModalFiltros() => exibirModalFiltros = true;
    private void FecharModalFiltros() => exibirModalFiltros = false;

    private void AplicarEFecharModalFiltros()
    {
        AplicarFiltrosEOrdenacao();
        FecharModalFiltros();
    }

    private void FecharTodosModais()
    {
        exibirModalNovoCiclo = false;
        exibirModalDetalhes = false;
        exibirModalConfirmarGestacao = false;
        exibirModalResultadoParto = false;
        exibirModalConfirmarResultado = false;
        exibirModalCadastroCria = false;
        exibirModalLamento = false;
        exibirModalFiltros = false;
        exibirModalRepetirCio = false; // Adicionado aqui
    }

    // NOVOS MÉTODOS PARA REPETIÇÃO DE CIO
    private void AbrirModalRepetirCio(Gestacao ciclo)
    {
        cicloParaAcao = ciclo; // O ciclo antigo que será finalizado
        cicloParaRepetir = new Gestacao
            {
                VacaId = ciclo.VacaId,
                DataInicio = DateTime.Today,
                ScoreCorporal = null
            };
        exibirModalRepetirCio = true;
    }

    private async Task SalvarRepeticaoCio()
    {
        if (cicloParaRepetir.VacaId == 0 || string.IsNullOrEmpty(cicloParaRepetir.TipoCobertura)) return;
        try
        {
            carregandoDados = true;
            exibirModalRepetirCio = false;
            if (cicloParaRepetir.TouroId == 0) cicloParaRepetir.TouroId = null;

            await GestacaoService.RepetirCicloAsync(cicloParaAcao.Id, cicloParaRepetir);
            await CarregarDados();
        }
        finally { carregandoDados = false; }
    }
}