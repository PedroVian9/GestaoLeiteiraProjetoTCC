@page "/producao-leiteira"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject ILactacaoService LactacaoService
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService
@inject IProducaoLeiteiraService ProducaoLeiteiraService

<div class="page-container">
    <h3 class="page-title">Registro de Produção Leiteira</h3>
    <div class="current-date">@DateTime.Now.ToString("dd/MM/yyyy")</div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (VacasLactantes == null)
    {
        <p class="loading-message">Carregando...</p>
    }
    else if (!VacasLactantes.Any())
    {
        <p class="empty-message">Nenhuma vaca em lactação no momento.</p>
    }
    else
    {
        <div class="vacas-grid">
            @foreach (var item in VacasLactantes)
            {
                <div class="vaca-card">
                    <div class="card-header">
                        <span class="animal-name">@item.Animal.NomeAnimal (@item.Animal.NumeroIdentificador)</span>
                        <span class="status-badge lactante">Em Lactação</span>
                    </div>

                    <div class="card-details">
                        <div class="detail-item">
                            <span class="detail-label">Início da Lactação:</span>
                            <span class="detail-value">@item.Lactacao.DataInicio.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Dias de Lactação:</span>
                            <span class="detail-value">@CalcularDiasCorridos(item.Lactacao.DataInicio) dias</span>
                        </div>
                        @if (item.UltimaProducao != null)
                        {
                            <div class="detail-item">
                                <span class="detail-label">Última Produção:</span>
                                <span class="detail-value">@item.UltimaProducao.Data.ToString("dd/MM/yyyy") - @item.UltimaProducao.Quantidade.ToString("F2")L</span>
                            </div>
                        }
                    </div>

                    <div class="card-actions">
                        @if (ProducaoRegistradaHojeMap.ContainsKey(item.Lactacao.Id) && ProducaoRegistradaHojeMap[item.Lactacao.Id])
                        {
                            <button class="btn-action ja-registrado" disabled>
                                <i class="fas fa-check-circle"></i> Produção já registrada hoje
                            </button>
                        }
                        else
                        {
                            <button class="btn-action registrar" @onclick="() => AbrirModalProducao(item.Lactacao.Id, item.Animal.Id, item.Animal.NomeAnimal)">
                                <i class="fas fa-plus-circle"></i> Registrar produção diária
                            </button>
                        }
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal de Registro de Produção -->
    @if (MostrarModalProducao)
    {
        <div class="modal-overlay" @onclick="FecharModalProducao">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Registrar Produção Diária</h3>
                <p class="modal-info-text">Vaca: <strong>@NomeAnimalSelecionado</strong></p>

                <div class="form-group">
                    <label>Data:</label>
                    <input class="form-control" value="@DataProducao.ToString("dd/MM/yyyy")" disabled />
                </div>

                <div class="form-group">
                    <label>Quantidade (litros):</label>
                    <input type="number" step="0.01" class="form-control" @bind="QuantidadeLitros" placeholder="Ex: 25.50" />
                    @if (MostrarErroQuantidade)
                    {
                        <span class="text-danger">Informe uma quantidade válida maior que zero.</span>
                    }
                </div>

                <div class="footer-actions">
                    <button class="btn btn-secondary" @onclick="FecharModalProducao">Cancelar</button>
                    <button class="btn btn-primary" @onclick="SalvarProducao">Salvar</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-title {
        color: #023047;
        text-align: center;
        margin: 20px 0 30px;
    }

    .current-date {
        text-align: center;
        color: #666;
        margin-bottom: 30px;
        font-size: 16px;
        font-weight: 500;
    }

    .vacas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .vaca-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-left: 4px solid #28a745;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .animal-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .status-badge {
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        font-weight: bold;
    }

        .status-badge.lactante {
            background-color: #003566;
            color: white;
        }

    .card-details {
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        flex-wrap: wrap;
    }

    .detail-label {
        font-weight: 500;
        color: #555;
        min-width: 120px;
    }

    .detail-value {
        color: #333;
        text-align: right;
        flex: 1;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
    }

    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

        .btn-action.ja-registrado {
            background-color: #d6d6d6;
            color: #777;
            cursor: not-allowed;
        }

        .btn-action.registrar {
            background-color: #17a2b8;
            color: white;
        }

            .btn-action.registrar:hover {
                background-color: #138496;
            }

    .loading-message, .empty-message {
        text-align: center;
        color: #666;
        margin: 40px 0;
        font-size: 16px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
            margin-bottom: 20px;
        }

    .modal-info-text {
        color: #666;
        margin-bottom: 20px;
        font-size: 14px;
    }

    /* Form styles */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 16px;
    }

        .form-control:disabled {
            background-color: #f8f9fa;
            color: #6c757d;
        }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 25px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: block;
    }

    .fas {
        font-size: 14px;
    }
</style>

@code {
    public class VacaLactante
    {
        public Animal Animal { get; set; }
        public Lactacao Lactacao { get; set; }
        public GestaoLeiteiraProjetoTCC.Models.ProducaoLeiteira UltimaProducao { get; set; }
    }

    private List<Animal> Animais = new();
    private List<Lactacao> Lactacoes = new();
    private List<VacaLactante> VacasLactantes = new();
    private Propriedade PropriedadeLogada;
    private bool carregandoDados = true;

    // Modal de produção
    private bool MostrarModalProducao = false;
    private DateTime DataProducao = DateTime.Now;
    private double QuantidadeLitros;
    private int LactacaoSelecionadaId;
    private int AnimalSelecionadoParaProducaoId;
    private string NomeAnimalSelecionado = "";
    private bool MostrarErroQuantidade = false;

    // Controle de produções registradas
    private Dictionary<int, bool> ProducaoRegistradaHojeMap = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            PropriedadeLogada = PropriedadeService.ObterPropriedadeLogada();
            if (PropriedadeLogada != null)
            {
                await CarregarDados();
            }
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarDados()
    {
        // Carrega animais da propriedade
        Animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(PropriedadeLogada.Id);

        // Carrega lactações ativas
        Lactacoes = new List<Lactacao>();
        foreach (var animal in Animais.Where(a => a.Lactante))
        {
            var lactacoesAnimal = await LactacaoService.ObterLactacoesPorAnimalAsync(animal.Id);
            var lactacaoAtiva = lactacoesAnimal.FirstOrDefault(l => l.DataFim == null);
            if (lactacaoAtiva != null)
            {
                Lactacoes.Add(lactacaoAtiva);
            }
        }

        // Monta a lista de vacas lactantes com suas informações
        VacasLactantes = new List<VacaLactante>();
        foreach (var lactacao in Lactacoes)
        {
            var animal = Animais.FirstOrDefault(a => a.Id == lactacao.AnimalId);
            if (animal != null)
            {
                var ultimaProducao = await ObterUltimaProducao(lactacao.Id);

                VacasLactantes.Add(new VacaLactante
                    {
                        Animal = animal,
                        Lactacao = lactacao,
                        UltimaProducao = ultimaProducao
                    });
            }
        }

        // Carrega status de produções registradas hoje
        await CarregarProducoesRegistradas();
    }

    private async Task<GestaoLeiteiraProjetoTCC.Models.ProducaoLeiteira> ObterUltimaProducao(int lactacaoId)
    {
        try
        {
            var producoes = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
            return producoes.OrderByDescending(p => p.Data).FirstOrDefault();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao obter última produção: {ex.Message}");
            return null;
        }
    }

    private async Task CarregarProducoesRegistradas()
    {
        foreach (var lactacao in Lactacoes)
        {
            ProducaoRegistradaHojeMap[lactacao.Id] = await ProducaoRegistradaHojeAsync(lactacao.Id);
        }
    }

    private async Task<bool> ProducaoRegistradaHojeAsync(int lactacaoId)
    {
        try
        {
            var producoes = await ProducaoLeiteiraService.ObterProducoesPorLactacaoAsync(lactacaoId);
            return producoes.Any(p => p.Data.Date == DateTime.Today);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao verificar produções: {ex.Message}");
            return false;
        }
    }

    private int CalcularDiasCorridos(DateTime dataInicio)
    {
        return (DateTime.Now.Date - dataInicio.Date).Days;
    }

    private void AbrirModalProducao(int lactacaoId, int animalId, string nomeAnimal)
    {
        LactacaoSelecionadaId = lactacaoId;
        AnimalSelecionadoParaProducaoId = animalId;
        NomeAnimalSelecionado = nomeAnimal;
        QuantidadeLitros = 0;
        MostrarErroQuantidade = false;
        DataProducao = DateTime.Now;
        MostrarModalProducao = true;
    }

    private void FecharModalProducao()
    {
        MostrarModalProducao = false;
    }

    private async Task SalvarProducao()
    {
        MostrarErroQuantidade = false;

        if (QuantidadeLitros <= 0)
        {
            MostrarErroQuantidade = true;
            return;
        }

        try
        {
            carregandoDados = true;
            StateHasChanged();

            var novaProducao = new GestaoLeiteiraProjetoTCC.Models.ProducaoLeiteira
                {
                    AnimalId = AnimalSelecionadoParaProducaoId,
                    LactacaoId = LactacaoSelecionadaId,
                    Data = DataProducao,
                    Quantidade = QuantidadeLitros,
                    PropriedadeId = PropriedadeLogada.Id
                };

            await ProducaoLeiteiraService.CriarProducaoLeiteiraAsync(novaProducao);

            // Atualiza o status após salvar
            ProducaoRegistradaHojeMap[LactacaoSelecionadaId] = true;

            // Atualiza a última produção na lista
            var vacaLactante = VacasLactantes.FirstOrDefault(v => v.Lactacao.Id == LactacaoSelecionadaId);
            if (vacaLactante != null)
            {
                vacaLactante.UltimaProducao = novaProducao;
            }

            FecharModalProducao();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao salvar produção: {ex.Message}");
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }
}