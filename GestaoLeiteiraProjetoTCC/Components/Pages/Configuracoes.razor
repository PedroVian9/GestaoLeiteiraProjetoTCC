@page "/configuracoes"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Configurações</h1>
                <p class="property-owner">Gerencie informações da propriedade e conta</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
    </div>

    @if (propriedade == null)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else
    {
        <div class="cards-container">
            <div class="config-card">
                <div class="card-header">
                    <i class="fas fa-home"></i>
                    <h4>Informações da Propriedade</h4>
                </div>

                <div class="card-body">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nomeProprietario">Nome do Proprietário</label>
                            <input id="nomeProprietario" type="text" @bind="propriedade.NomeProprietario"
                                   placeholder="Digite o nome do proprietário" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="nomePropriedade">Nome da Propriedade</label>
                            <input id="nomePropriedade" type="text" @bind="propriedade.NomePropriedade"
                                   placeholder="Digite o nome da propriedade" class="form-control" />
                        </div>

                        <div class="form-group">
                            <label for="localizacao">Localização</label>
                            <input id="localizacao" type="text" @bind="propriedade.Localizacao"
                                   placeholder="Digite a localização" class="form-control" />
                        </div>

                        <div class="form-grid-2-col">
                            <div class="form-group">
                                <label for="areaTotal">Área Total</label>
                                <input id="areaTotal" type="number" step="0.01" @bind="propriedade.AreaTotal"
                                       placeholder="0,00" class="form-control" />
                            </div>

                            <div class="form-group">
                                <label for="tipoUnidade">Unidade</label>
                                <select id="tipoUnidade" @bind="propriedade.TipoUnidade" class="form-control">
                                    <option value="0" disabled>Selecione...</option>
                                    <option value="1">Alqueires Mineiros</option>
                                    <option value="2">Alqueires Paulistas</option>
                                    <option value="3">Hectares</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="card-footer">
                    <button class="btn btn-primary" @onclick="SalvarPropriedade">
                        <i class="fas fa-save"></i>
                        Salvar Alterações
                    </button>
                    @if (!string.IsNullOrEmpty(mensagemErroPropriedade))
                    {
                        <div class="alert alert-danger">
                            @mensagemErroPropriedade
                        </div>
                    }
                </div>
            </div>

            <div class="cards-container-right">
                <div class="config-card security">
                    <div class="card-header">
                        <i class="fas fa-lock"></i>
                        <h4>Segurança da Conta</h4>
                    </div>

                    <div class="card-body">
                        <div class="form-group">
                            <label for="novaSenha">Nova Senha</label>
                            <input id="novaSenha" type="password" @bind="novaSenha" class="form-control"
                                   placeholder="Mínimo de 6 caracteres" />
                        </div>
                        <div class="form-group">
                            <label for="confirmaSenha">Confirmar Senha</label>
                            <input id="confirmaSenha" type="password" @bind="confirmaSenha" class="form-control"
                                   placeholder="Confirme a nova senha" />
                        </div>
                    </div>

                    <div class="card-footer">
                        <button class="btn btn-primary" @onclick="AlterarSenha">
                            <i class="fas fa-key"></i>
                            Alterar Senha
                        </button>
                        @if (!string.IsNullOrEmpty(mensagemErroSenha))
                        {
                            <div class="alert alert-danger">
                                @mensagemErroSenha
                            </div>
                        }
                    </div>
                </div>

                <div class="config-card milking">
                    <div class="card-header">
                        <i class="fas fa-clock"></i>
                        <h4>Configurações de Ordenha</h4>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            <label for="quantidadeOrdenhas">Ordenhas por Dia</label>
                            <select id="quantidadeOrdenhas" @bind="quantidadeOrdenhas" class="form-control">
                                <option value="1">1 vez por dia</option>
                                <option value="2">2 vezes por dia</option>
                                <option value="3">3 vezes por dia</option>
                            </select>
                        </div>
                    </div>
                    <div class="card-footer disabled-notice">
                        <i class="fas fa-info-circle"></i> Funcionalidade em desenvolvimento
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (exibirModalSucesso)
{
    <div class="modal-overlay" @onclick="FecharModal">
        <div class="modal-content success-modal" @onclick:stopPropagation="true">
            <div class="success-icon">
                <i class="fas fa-check-circle"></i>
            </div>
            <h3>Sucesso!</h3>
            <p class="modal-info-text">@mensagemSucesso</p>
            <div class="footer-actions">
                <button class="btn btn-primary" @onclick="FecharModal">
                    Entendido
                </button>
            </div>
        </div>
    </div>
}

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* === ESTILOS DO CABEÇALHO === */
    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3a7ca5;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* === ESTILOS DOS CARDS === */
    .cards-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
        align-items: start;
    }

    .cards-container-right {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .config-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.08);
        border-left: 4px solid #3a7ca5;
        display: flex;
        flex-direction: column;
    }

        .config-card.security {
            border-left-color: #6c757d;
        }

        .config-card.milking {
            border-left-color: #17a2b8;
        }

    .card-header {
        display: flex;
        align-items: center;
        gap: 12px;
        padding: 15px 20px;
        border-bottom: 1px solid #eee;
    }

        .card-header i {
            font-size: 20px;
            color: #3a7ca5;
        }

    .config-card.security .card-header i {
        color: #6c757d;
    }

    .config-card.milking .card-header i {
        color: #17a2b8;
    }

    .card-header h4 {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
        color: #023047;
    }

    .card-body {
        padding: 25px;
        flex-grow: 1;
    }

    .card-footer {
        background-color: #f8f9fa;
        padding: 15px 25px;
        border-top: 1px solid #eee;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .disabled-notice {
        color: #6c757d;
        font-style: italic;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* === ESTILOS DE FORMULÁRIO === */
    .form-grid {
        display: grid;
        gap: 20px;
    }

    .form-grid-2-col {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 20px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

        .form-group label {
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #3a7ca5;
            background-color: #fff;
            box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.15);
        }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

    /* === ESTILOS DE BOTÕES E MENSAGENS === */
    .btn-primary {
        background-color: #3a7ca5;
        color: white;
        padding: 10px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 15px;
        font-weight: 600;
        border: none;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: all 0.3s ease;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .alert {
        padding: 12px;
        border-radius: 8px;
        font-size: 14px;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    /* === ESTILOS DO MODAL === */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content.success-modal {
        background-color: #ffffff;
        padding: 25px 35px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 450px;
        text-align: center;
    }

    .success-icon {
        font-size: 48px;
        color: #28a745;
        margin-bottom: 15px;
    }

    .success-modal h3 {
        margin-top: 0;
        color: #023047;
        font-size: 24px;
        font-weight: 600;
        margin-bottom: 10px;
    }

    .modal-info-text {
        color: #6c757d;
        margin-bottom: 25px;
        font-size: 15px;
        line-height: 1.5;
    }

    .footer-actions {
        display: flex;
        justify-content: center;
    }
</style>

@code {
    private Propriedade propriedade;
    private string novaSenha;
    private string confirmaSenha;
    private int quantidadeOrdenhas = 2;

    private string mensagemErroPropriedade;
    private string mensagemErroSenha;
    private string mensagemSucesso;
    private bool exibirModalSucesso = false;

    protected override async Task OnInitializedAsync()
    {
        propriedade = PropriedadeService.ObterPropriedadeLogada();

        if (propriedade == null)
        {
            var lista = await PropriedadeService.ObterTodasPropriedadesAsync();
            propriedade = lista.FirstOrDefault();
        }
    }

    private async Task SalvarPropriedade()
    {
        mensagemErroPropriedade = "";
        var sucesso = await PropriedadeService.EditarPropriedadeAsync(propriedade);

        if (sucesso)
        {
            mensagemSucesso = "Informações da propriedade atualizadas com sucesso!";
            exibirModalSucesso = true;
        }
        else
        {
            mensagemErroPropriedade = "Erro ao atualizar a propriedade.";
        }
    }

    private async Task AlterarSenha()
    {
        mensagemErroSenha = "";

        if (string.IsNullOrWhiteSpace(novaSenha) || novaSenha.Length < 6)
        {
            mensagemErroSenha = "A nova senha deve ter pelo menos 6 caracteres.";
            return;
        }

        if (novaSenha != confirmaSenha)
        {
            mensagemErroSenha = "As senhas não coincidem.";
            return;
        }

        var sucesso = await PropriedadeService.AlterarSenhaAsync(propriedade.Id, novaSenha);

        if (sucesso)
        {
            novaSenha = "";
            confirmaSenha = "";
            mensagemSucesso = "Sua senha foi alterada com sucesso!";
            exibirModalSucesso = true;
        }
        else
        {
            mensagemErroSenha = "Ocorreu um erro ao alterar a senha.";
        }
    }

    private void FecharModal()
    {
        exibirModalSucesso = false;
    }
}