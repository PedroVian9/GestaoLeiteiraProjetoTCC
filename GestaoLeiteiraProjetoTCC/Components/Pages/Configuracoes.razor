@page "/configuracoes"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService

<div class="dashboard-wrapper">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Configurações</h1>
                <p class="property-owner">Gerencie informações da propriedade e conta</p>
            </div>
        </div>
    </div>

    @if (propriedade == null)
    {
        <div class="loading-container">
            <div class="loading-spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else
    {
        <div class="cards-container">
            <div class="config-card">
                <div class="card-header">
                    <i class="fas fa-home"></i>
                    <h4>Informações da Propriedade</h4>
                </div>

                <div class="card-body">
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nomeProprietario">Nome do Proprietário</label>
                            <input id="nomeProprietario" type="text" @bind="propriedade.NomeProprietario"
                                   placeholder="Digite o nome do proprietário" />
                        </div>

                        <div class="form-group">
                            <label for="nomePropriedade">Nome da Propriedade</label>
                            <input id="nomePropriedade" type="text" @bind="propriedade.NomePropriedade"
                                   placeholder="Digite o nome da propriedade" />
                        </div>

                        <div class="form-group">
                            <label for="localizacao">Localização</label>
                            <input id="localizacao" type="text" @bind="propriedade.Localizacao"
                                   placeholder="Digite a localização" />
                        </div>

                        <div class="form-group-row">
                            <div class="form-group">
                                <label for="areaTotal">Área Total</label>
                                <input id="areaTotal" type="number" step="0.01" @bind="propriedade.AreaTotal"
                                       placeholder="0,00" />
                            </div>

                            <div class="form-group">
                                <label for="tipoUnidade">Unidade</label>
                                <select id="tipoUnidade" @bind="propriedade.TipoUnidade">
                                    <option value="0">Selecione...</option>
                                    <option value="1">Hectares</option>
                                    <option value="2">Alqueires</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(mensagemErroPropriedade))
                    {
                        <div class="error-message">
                            <i class="fas fa-exclamation-triangle"></i>
                            <span>@mensagemErroPropriedade</span>
                        </div>
                    }
                </div>

                <div class="card-footer">
                    <button class="btn-primary" @onclick="SalvarPropriedade">
                        <i class="fas fa-save"></i>
                        Salvar Alterações
                    </button>
                </div>
            </div>

            <div class="cards-container-right">
                <div class="config-card">
                    <div class="card-header">
                        <i class="fas fa-lock"></i>
                        <h4>Segurança da Conta</h4>
                    </div>

                    <div class="card-body">
                        <div class="form-group">
                            <label for="novaSenha">Nova Senha</label>
                            <input id="novaSenha" type="password" @bind="novaSenha"
                                   placeholder="Digite a nova senha (mínimo 6 caracteres)" />
                            <small class="form-helper">A senha deve ter pelo menos 6 caracteres</small>
                        </div>
                        <div class="form-group">
                            <label for="confirmaSenha">Confirmar Senha</label>
                            <input id="confirmaSenha" type="password" @bind="confirmaSenha"
                                   placeholder="Confirme a nova senha" />
                        </div>

                        @if (!string.IsNullOrEmpty(mensagemErroSenha))
                        {
                            <div class="error-message">
                                <i class="fas fa-exclamation-triangle"></i>
                                <span>@mensagemErroSenha</span>
                            </div>
                        }
                    </div>

                    <div class="card-footer">
                        <button class="btn-primary" @onclick="AlterarSenha">
                            <i class="fas fa-key"></i>
                            Alterar Senha
                        </button>
                    </div>
                </div>

                <div class="config-card">
                    <div class="card-header">
                        <i class="fas fa-clock"></i>
                        <h4>Configurações de Ordenha</h4>
                    </div>

                    <div class="card-body">
                        <div class="form-group">
                            <label for="quantidadeOrdenhas">Ordenhas por Dia</label>
                            <select id="quantidadeOrdenhas" @bind="quantidadeOrdenhas">
                                <option value="1">1 vez por dia</option>
                                <option value="2">2 vezes por dia</option>
                                <option value="3">3 vezes por dia</option>
                            </select>
                            <div class="info-badge">
                                <i class="fas fa-info-circle"></i>
                                <span>Funcionalidade em desenvolvimento</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (exibirModalSucesso)
{
    <div class="modal-overlay" @onclick="FecharModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <div class="success-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <h3>Sucesso!</h3>
            </div>
            <div class="modal-body">
                <p>@mensagemSucesso</p>
            </div>
            <div class="modal-footer">
                <button class="btn-primary" @onclick="FecharModal">
                    <i class="fas fa-check"></i>
                    Entendido
                </button>
            </div>
        </div>
    </div>
}

<style>
    /* Estilos do Dashboard (mantidos do código de referência) */
    .dashboard-wrapper {
        background: #f8f9fa;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.5rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.2rem;
        margin: 5px 0 0 0;
        font-weight: 500;
    }

    /* Estilos do Formulário de Configurações */
    .cards-container {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 24px;
        margin-top: 20px;
        align-items: start;
    }

    .cards-container-right {
        display: flex;
        flex-direction: column;
        gap: 24px;
    }

    .config-card {
        background: #ffffff;
        border-radius: 8px; /* Ajuste para ser mais suave */
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1); /* Sombra mais suave */
        border: 1px solid #e5e7eb;
        overflow: hidden;
    }

    .card-header {
        background: #f8fafc;
        color: #1f2937;
        padding: 20px 24px;
        display: flex;
        align-items: center;
        gap: 12px;
        border-bottom: 1px solid #e5e7eb;
    }

        .card-header i {
            font-size: 20px;
            color: #3a7ca5; /* Cor de destaque */
        }

        .card-header h4 {
            margin: 0;
            font-size: 18px;
            font-weight: 600;
        }

    .card-body {
        padding: 24px;
    }

    .card-footer {
        padding: 16px 24px;
        background: #f8fafc;
        border-top: 1px solid #e5e7eb;
    }

    /* Form Styles */
    .form-grid {
        display: grid;
        gap: 20px;
    }

    .form-group-row {
        display: grid;
        grid-template-columns: 2fr 1fr;
        gap: 16px;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 6px;
    }

        .form-group label {
            font-weight: 600;
            color: #374151;
            font-size: 14px;
        }

        .form-group input,
        .form-group select {
            padding: 12px 16px;
            border: 1px solid #d1d5db; /* Cor de borda mais suave */
            border-radius: 8px;
            font-size: 14px;
            background: white;
        }

            .form-group input:focus,
            .form-group select:focus {
                outline: none;
                border-color: #3a7ca5;
                box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.2);
            }

            .form-group input::placeholder {
                color: #9ca3af;
            }

    .form-helper {
        font-size: 12px;
        color: #6b7280;
        margin-top: 4px;
    }

    /* Button Styles */
    .btn-primary {
        background: #3a7ca5; /* Cor do botão principal */
        color: white;
        border: none;
        padding: 12px 20px;
        border-radius: 8px;
        cursor: pointer;
        font-weight: 600;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        min-width: fit-content;
    }

        .btn-primary:hover {
            background: #2c5f7f;
        }

    /* Messages */
    .error-message {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 16px;
        background: #fef2f2;
        border: 1px solid #fecaca;
        border-radius: 8px;
        color: #dc2626;
        font-size: 14px;
        margin-top: 12px;
    }

        .error-message i {
            font-size: 16px;
        }

    .info-badge {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px 12px;
        background: #eff6ff;
        border: 1px solid #bfdbfe;
        border-radius: 6px;
        color: #1d4ed8;
        font-size: 12px;
        margin-top: 8px;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.6);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        backdrop-filter: blur(4px);
    }

    .modal-content {
        background: white;
        border-radius: 16px;
        width: 90%;
        max-width: 400px;
        box-shadow: 0 20px 25px rgba(0, 0, 0, 0.15);
        overflow: hidden;
    }

    .modal-header {
        text-align: center;
        padding: 32px 24px 16px;
    }

    .success-icon {
        width: 64px;
        height: 64px;
        background: #10b981;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 16px;
    }

        .success-icon i {
            font-size: 28px;
            color: white;
        }

    .modal-header h3 {
        margin: 0;
        color: #1f2937;
        font-size: 20px;
        font-weight: 600;
    }

    .modal-body {
        padding: 0 24px 24px;
        text-align: center;
    }

        .modal-body p {
            color: #6b7280;
            font-size: 16px;
            margin: 0;
            line-height: 1.5;
        }

    .modal-footer {
        padding: 16px 24px 24px;
        text-align: center;
    }
</style>

@code {
    private Propriedade propriedade;
    private string novaSenha;
    private string confirmaSenha;
    private int quantidadeOrdenhas = 2;

    private string mensagemErroPropriedade;
    private string mensagemErroSenha;
    private string mensagemSucesso;
    private bool exibirModalSucesso = false;

    protected override async Task OnInitializedAsync()
    {
        propriedade = PropriedadeService.ObterPropriedadeLogada();

        if (propriedade == null)
        {
            var lista = await PropriedadeService.ObterTodasPropriedadesAsync();
            propriedade = lista.FirstOrDefault();
        }
    }

    private async Task SalvarPropriedade()
    {
        mensagemErroPropriedade = "";
        var sucesso = await PropriedadeService.EditarPropriedadeAsync(propriedade);

        if (sucesso)
        {
            mensagemSucesso = "Propriedade atualizada com sucesso!";
            exibirModalSucesso = true;
        }
        else
        {
            mensagemErroPropriedade = "Erro ao atualizar propriedade.";
        }
    }

    private async Task AlterarSenha()
    {
        mensagemErroSenha = "";

        if (string.IsNullOrWhiteSpace(novaSenha) || novaSenha.Length < 6)
        {
            mensagemErroSenha = "A nova senha deve ter pelo menos 6 caracteres.";
            return;
        }

        if (novaSenha != confirmaSenha)
        {
            mensagemErroSenha = "As senhas não coincidem.";
            return;
        }

        var sucesso = await PropriedadeService.AlterarSenhaAsync(propriedade.Id, novaSenha);

        if (sucesso)
        {
            novaSenha = "";
            confirmaSenha = "";
            mensagemSucesso = "Senha alterada com sucesso!";
            exibirModalSucesso = true;
        }
        else
        {
            mensagemErroSenha = "Erro ao alterar senha.";
        }
    }

    private void FecharModal()
    {
        exibirModalSucesso = false;
    }
}