@page "/lactacao"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject ILactacaoService LactacaoService
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Gerenciamento de Lactações</h1>
                <p class="property-owner">Controle o início e o fim das lactações do seu rebanho</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
    </div>

    <div class="actions-container">
        <button class="btn-action add" @onclick="AbrirModal">
            <span class="plus-icon">+</span> Nova Lactação
        </button>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (AnimaisLactacoes == null)
    {
        <p class="loading-message">Carregando...</p>
    }
    else if (!LactacoesAtivas.Any())
    {
        <p class="empty-message">Nenhuma lactação ativa no momento.</p>
    }
    else
    {
        <div class="lactacoes-grid">
            @foreach (var lactacao in LactacoesAtivas)
            {
                <div class="lactacao-card">
                    <div class="card-header">
                        <span class="animal-name">@ObterNomeAnimal(lactacao.AnimalId)</span>
                        <span class="status-badge active">Ativa</span>
                    </div>

                    <div class="card-details">
                        <div class="detail-item">
                            <span class="detail-label">Início da Lactação:</span>
                            <span class="detail-value">@lactacao.DataInicio.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Dias em Lactação:</span>
                            <span class="detail-value">@CalcularDiasCorridos(lactacao.DataInicio) dias</span>
                        </div>
                    </div>

                    <div class="card-actions">
                        <button class="btn-action finalizar" @onclick="() => AbrirModalConfirmacao(lactacao.Id)">
                            <i class="fas fa-stop-circle"></i> Finalizar
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (MostrarModal)
    {
        <div class="modal-overlay" @onclick="FecharModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Registrar Nova Lactação</h3>
                <p class="modal-info-text">Selecione uma vaca com status "Ativo" que não esteja em lactação para iniciar um novo ciclo.</p>

                <div class="form-group">
                    <label for="animal">Animal</label>
                    <select id="animal" @bind="AnimalSelecionadoId" class="form-control">
                        <option value="0" disabled selected>Clique para selecionar um animal</option>
                        @if (AnimaisAptos != null && AnimaisAptos.Any())
                        {
                            @foreach (var animal in AnimaisAptos)
                            {
                                <option value="@animal.Id">@animal.NomeAnimal (@animal.NumeroIdentificador)</option>
                            }
                        }
                        else
                        {
                            <option value="0" disabled>Nenhuma vaca apta disponível</option>
                        }
                    </select>
                    @if (MostrarErroAnimal)
                    {
                        <span class="validation-message">Por favor, selecione um animal.</span>
                    }
                </div>

                <div class="form-group">
                    <label for="dataInicio">Data de Início</label>
                    <input id="dataInicio" type="date" @bind="DataInicio" class="form-control" />
                    @if (MostrarErroData)
                    {
                        <span class="validation-message">A data de início não pode ser no futuro.</span>
                    }
                </div>

                <div class="footer-actions">
                    <button @onclick="FecharModal" class="btn btn-secondary">Cancelar</button>
                    <button @onclick="CriarLactacao" class="btn btn-primary" disabled="@(AnimaisAptos == null || !AnimaisAptos.Any())">Salvar</button>
                </div>
            </div>
        </div>
    }

    @if (MostrarModalConfirmacao)
    {
        <div class="modal-overlay" @onclick="FecharModalConfirmacao">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Confirmar Finalização</h3>
                <p class="modal-info-text">
                    Tem certeza que deseja finalizar esta lactação? A data de término será registrada como hoje. Esta ação não poderá ser desfeita.
                </p>

                <div class="footer-actions">
                    <button @onclick="FecharModalConfirmacao" class="btn btn-secondary">Cancelar</button>
                    <button @onclick="ConfirmarFinalizacao" class="btn btn-danger">Confirmar Finalização</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* === ESTILOS DO CABEÇALHO === */
    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .actions-container {
        display: flex;
        justify-content: flex-end;
        margin-bottom: 25px;
    }

    .lactacoes-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .lactacao-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-left: 4px solid #3a7ca5;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .animal-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .status-badge {
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        font-weight: bold;
    }

        .status-badge.active {
            background-color: #3a7ca5;
            color: white;
        }

    .card-details {
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        flex-wrap: wrap;
    }

    .detail-label {
        font-weight: 500;
        color: #555;
    }

    .detail-value {
        color: #333;
        font-weight: 500;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 20px;
    }

    /* === ESTILOS DOS BOTÕES === */
    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        transition: background-color 0.2s;
    }

        .btn-action .plus-icon {
            margin-right: 2px;
            font-weight: bold;
            font-size: 18px;
        }

        .btn-action.add {
            background-color: #8a5a44;
            color: white;
        }

            .btn-action.add:hover {
                background-color: #714a38;
            }

        .btn-action.finalizar {
            background-color: #dc3545;
            color: white;
        }

            .btn-action.finalizar:hover {
                background-color: #c82333;
            }

    .loading-message, .empty-message {
        text-align: center;
        color: #666;
        margin: 40px 0;
        font-size: 16px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* === ESTILOS DOS MODAIS === */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #ffffff;
        padding: 25px 35px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            font-size: 24px;
            font-weight: 600;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e7ee;
            margin-bottom: 20px;
            text-align: center;
        }

    .modal-info-text {
        color: #6c757d;
        margin-bottom: 25px;
        font-size: 15px;
        text-align: center;
        line-height: 1.5;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #3a7ca5;
            background-color: #fff;
            box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.15);
        }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e0e7ee;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

        .btn-primary:disabled {
            background-color: #cccccc;
            cursor: not-allowed;
            opacity: 0.7;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
        border: none;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .validation-message {
        color: #e53e3e;
        font-size: 12px;
        margin-top: 5px;
        display: block;
    }

</style>

@code {
    private List<Animal> Animais = new();
    private List<Animal> AnimaisAptos = new();
    private List<Lactacao> AnimaisLactacoes = new();
    private List<Lactacao> LactacoesAtivas => AnimaisLactacoes.Where(l => l.DataFim == null).ToList();
    private int? AnimalSelecionadoId;
    private bool MostrarModal = false;
    private bool MostrarModalConfirmacao = false;
    private bool MostrarErroAnimal = false;
    private bool MostrarErroData = false;
    private DateTime DataInicio = DateTime.Now;
    private Propriedade PropriedadeLogada;
    private int? LactacaoParaFinalizarId;
    private bool carregandoDados = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            PropriedadeLogada = PropriedadeService.ObterPropriedadeLogada();
            if (PropriedadeLogada != null)
            {
                Animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(PropriedadeLogada.Id);
                await CarregarLactacoes();
            }
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private string ObterNomeAnimal(int animalId)
    {
        var animal = Animais.FirstOrDefault(a => a.Id == animalId);
        return animal != null ? $"{animal.NomeAnimal} ({animal.NumeroIdentificador})" : $"Animal ID: {animalId}";
    }

    private int CalcularDiasCorridos(DateTime dataInicio)
    {
        return (DateTime.Now.Date - dataInicio.Date).Days;
    }

    private async Task CarregarLactacoes()
    {
        if (PropriedadeLogada != null)
        {
            AnimaisLactacoes = new List<Lactacao>();
            foreach (var animal in Animais)
            {
                var lactacoesAnimal = await LactacaoService.ObterLactacoesPorAnimalAsync(animal.Id);
                AnimaisLactacoes.AddRange(lactacoesAnimal);
            }
            AnimaisLactacoes = AnimaisLactacoes.OrderByDescending(l => l.DataInicio).ToList();
        }
    }

    private async Task AbrirModal()
    {
        try
        {
            AnimalSelecionadoId = 0;
            DataInicio = DateTime.Now;
            MostrarErroAnimal = false;
            MostrarErroData = false;

            if (PropriedadeLogada != null)
            {
                AnimaisAptos = await AnimalService.ObterAnimaisValidosLactacao(PropriedadeLogada.Id);
            }

            MostrarModal = true;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao carregar animais aptos: {ex.Message}");
            AnimaisAptos = new List<Animal>();
            MostrarModal = true;
            StateHasChanged();
        }
    }

    private void FecharModal()
    {
        MostrarModal = false;
    }

    private void AbrirModalConfirmacao(int lactacaoId)
    {
        LactacaoParaFinalizarId = lactacaoId;
        MostrarModalConfirmacao = true;
    }

    private void FecharModalConfirmacao()
    {
        MostrarModalConfirmacao = false;
        LactacaoParaFinalizarId = null;
    }

    private async Task CriarLactacao()
    {
        MostrarErroAnimal = AnimalSelecionadoId == null || AnimalSelecionadoId == 0;
        MostrarErroData = DataInicio > DateTime.Now.Date.AddDays(1); // Permite a data de hoje

        if (MostrarErroAnimal || MostrarErroData)
        {
            return;
        }

        try
        {
            carregandoDados = true;
            StateHasChanged();

            var novaLactacao = new Lactacao
                {
                    AnimalId = AnimalSelecionadoId.Value,
                    DataInicio = DataInicio,
                    PropriedadeId = PropriedadeLogada.Id
                };

            await LactacaoService.CriarLactacaoAsync(novaLactacao);
             var animalSelecionado = Animais.FirstOrDefault(a => a.Id == AnimalSelecionadoId.Value);

            if (animalSelecionado != null)

            {

                animalSelecionado.Lactante = true;

                await AnimalService.AtualizarAnimalAsync(animalSelecionado);



                var index = Animais.FindIndex(a => a.Id == animalSelecionado.Id);

                if (index >= 0)

                {

                    Animais[index] = animalSelecionado;

                }

            }
            await CarregarLactacoes(); // Recarrega para obter a nova lactação e o status atualizado do animal
            FecharModal();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao criar lactação: {ex.Message}");
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task ConfirmarFinalizacao()
    {
        if (LactacaoParaFinalizarId.HasValue)
        {
            try
            {
                carregandoDados = true;
                StateHasChanged();

                await LactacaoService.FinalizarLactacaoAsync(LactacaoParaFinalizarId.Value);
                await CarregarLactacoes();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao finalizar lactação: {ex.Message}");
            }
            finally
            {
                carregandoDados = false;
                FecharModalConfirmacao();
                StateHasChanged();
            }
        }
    }
}