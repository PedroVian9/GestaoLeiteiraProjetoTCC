@page "/controle-de-racas"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IRacaService RacaService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Controle de Raças</h1>
                <p class="property-owner">Adicione, edite e remova as raças do seu rebanho</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
    </div>

    <div class="filters-container">
        <div class="row align-items-end">
            <div class="col-md-5">
                <div class="form-group mb-md-0">
                    <label for="filtro-nome">Buscar por Nome</label>
                    <input id="filtro-nome" type="text" class="form-control" placeholder="Digite o nome da raça..."
                           @bind="filtroNome" @bind:event="oninput" @bind:after="AplicarFiltrosEOrdenacao" />
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group mb-md-0">
                    <label for="filtro-status">Filtrar por Tipo</label>
                    <select id="filtro-status" class="form-control" @bind="filtroStatus" @bind:after="AplicarFiltrosEOrdenacao">
                        <option value="Todos">Todos os Tipos</option>
                        <option value="Sistema">Padrão do Sistema</option>
                        <option value="Usuario">Criado pelo Usuário</option>
                    </select>
                </div>
            </div>

            <div class="col-md-4">
                <div class="form-group mb-md-0">
                    <label for="ordenacao">Ordenar por</label>
                    <select id="ordenacao" class="form-control" @bind="ordenacaoSelecionada" @bind:after="AplicarFiltrosEOrdenacao">
                        <option value="nome_asc">Nome (A-Z)</option>
                        <option value="nome_desc">Nome (Z-A)</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="raca-actions">
        <button class="btn-action add" @onclick="AbrirModalNova">
            <span class="plus-icon">+</span> Cadastrar nova raça
        </button>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (!Racas.Any())
    {
        <div class="empty-message-container">
            <div class="empty-message">
                <i class="fas fa-paw"></i>
                <p>Nenhuma raça cadastrada ainda.</p>
                <button class="btn btn-primary mt-3" @onclick="AbrirModalNova">Cadastrar primeira raça</button>
            </div>
        </div>
    }
    else if (!racasFiltradas.Any())
    {
        <div class="empty-message-container">
            <div class="empty-message">
                <i class="fas fa-search"></i>
                <p>Nenhuma raça encontrada para os filtros selecionados.</p>
            </div>
        </div>
    }
    else
    {
        <div class="racas-grid">
            @foreach (var raca in racasFiltradas)
            {
                <div class="raca-card">
                    <div class="card-header">
                        <span class="raca-name">@raca.NomeRaca</span>
                        <span class="status-badge @raca.Status.ToLower()">
                            @(raca.Status == "Sistema" ? "Padrão do Sistema" : "Criado pelo Usuário")
                        </span>
                    </div>

                    <div class="card-body">
                        @if (PodeEditarOuExcluir(raca))
                        {
                            <div class="card-actions">
                                <button class="btn-action editar" @onclick="() => AbrirModalEditar(raca)">
                                    <i class="fas fa-edit"></i> Editar
                                </button>
                                <button class="btn-action excluir" @onclick="() => ExcluirRaca(raca.Id)">
                                    <i class="fas fa-trash"></i> Excluir
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="sistema-notice">
                                <i class="fas fa-info-circle"></i>
                                <span>Raça padrão não pode ser modificada.</span>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
    }

    @if (exibirModal)
    {
        <div class="modal-overlay" @onclick="FecharModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>@(racaAtual.Id == 0 ? "Cadastrar Nova Raça" : "Editar Raça")</h3>

                <EditForm Model="racaAtual" OnValidSubmit="SalvarRaca">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label for="nomeRaca">Nome da Raça</label>
                        <InputText id="nomeRaca" @bind-Value="racaAtual.NomeRaca" class="form-control" placeholder="Ex: Holandesa, Gir Leiteiro..." />
                        <ValidationMessage For="@(() => racaAtual.NomeRaca)" />
                    </div>

                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Salvar</button>
                    </div>
                </EditForm>

                @if (mensagemSucesso != null)
                {
                    <div class="alert alert-success">@mensagemSucesso</div>
                }

                @if (!string.IsNullOrEmpty(MensagemErro))
                {
                    <div class="alert alert-danger">@MensagemErro</div>
                }
            </div>
        </div>
    }

    @if (exibirModalExclusao)
    {
        <div class="modal-overlay" @onclick="FecharModalExclusao">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>Confirmar Exclusão</h3>
                <p class="modal-info-text">Tem certeza de que deseja excluir a raça "<strong>@racaParaExcluir?.NomeRaca</strong>"? Esta ação não pode ser desfeita.</p>

                <div class="footer-actions">
                    <button type="button" class="btn btn-secondary" @onclick="FecharModalExclusao">Cancelar</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmarExclusao">Excluir Raça</button>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* === ESTILOS DO CABEÇALHO === */
    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* === ESTILOS DOS FILTROS (NOVOS) === */
    .filters-container {
        background: white;
        padding: 15px 25px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #e0e7ee;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .raca-actions {
        margin-bottom: 20px;
        display: flex;
        justify-content: flex-end;
    }

    .racas-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 20px;
    }

    .raca-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        border-left: 4px solid #8a5a44;
        display: flex;
        flex-direction: column;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #eee;
    }

    .raca-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .status-badge {
        font-size: 11px;
        padding: 4px 10px;
        border-radius: 20px;
        font-weight: 600;
        text-transform: none;
        white-space: nowrap;
    }

        .status-badge.sistema {
            background-color: #6c757d;
            color: white;
        }

        .status-badge.usuario {
            background-color: #8a5a44;
            color: white;
        }

    .card-body {
        padding: 20px;
        flex-grow: 1;
        display: flex;
        align-items: flex-end;
        justify-content: flex-end;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        width: 100%;
    }

    .sistema-notice {
        font-size: 13px;
        color: #6c757d;
        font-style: italic;
        display: flex;
        align-items: center;
        gap: 8px;
        width: 100%;
        justify-content: flex-end;
    }

    /* === ESTILOS DOS BOTÕES === */
    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 600;
        transition: background-color 0.2s;
    }

        .btn-action .plus-icon {
            margin-right: 2px;
            font-weight: bold;
            font-size: 18px;
        }

        .btn-action.add {
            background-color: #8a5a44;
            color: white;
        }

            .btn-action.add:hover {
                background-color: #714a38;
            }

        .btn-action.editar {
            background-color: #17a2b8;
            color: white;
        }

            .btn-action.editar:hover {
                background-color: #138496;
            }

        .btn-action.excluir {
            background-color: #dc3545;
            color: white;
        }

            .btn-action.excluir:hover {
                background-color: #c82333;
            }

    .empty-message-container {
        background-color: white;
        border-radius: 8px;
        padding: 40px;
        border: 1px solid #e0e7ee;
        margin-top: 20px;
    }

    .empty-message {
        text-align: center;
        color: #6c757d;
    }

        .empty-message i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #8a5a44;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* === ESTILOS DOS MODAIS === */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #ffffff;
        padding: 25px 35px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            font-size: 24px;
            font-weight: 600;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e7ee;
            margin-bottom: 25px;
            text-align: center;
        }

    .modal-info-text {
        color: #6c757d;
        margin-bottom: 25px;
        font-size: 15px;
        text-align: center;
        line-height: 1.5;
    }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }
    /* Adicionando estilo para o select dos filtros */
    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

    .form-control:focus {
        outline: none;
        border-color: #8a5a44;
        background-color: #fff;
        box-shadow: 0 0 0 3px rgba(138, 90, 68, 0.15);
    }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e0e7ee;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #8a5a44;
        color: white;
    }

        .btn-primary:hover {
            background-color: #714a38;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #c82333;
        }

    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 12px;
        margin-top: 4px;
    }
</style>

@code {
    private List<Raca> Racas = new();
    private List<Raca> racasFiltradas = new(); // Nova lista para exibição
    private Raca racaAtual = new();
    private Raca racaParaExcluir;
    private string MensagemErro = string.Empty;
    private string mensagemSucesso;
    private bool exibirModal = false;
    private bool exibirModalExclusao = false;
    private bool carregandoDados = true;

    // ========= INÍCIO: NOVAS VARIÁVEIS DE ESTADO PARA FILTROS E ORDENAÇÃO =========
    private string filtroNome = string.Empty;
    private string filtroStatus = "Todos";
    private string ordenacaoSelecionada = "nome_asc";
    // ========= FIM: NOVAS VARIÁVEIS DE ESTADO =========

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();
            await CarregarRacas();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarRacas()
    {
        Racas = await RacaService.ObterRacasOrdenadasPorNome();
        AplicarFiltrosEOrdenacao(); // Aplica filtros após carregar os dados
    }

    // ========= INÍCIO: NOVA LÓGICA PARA FILTRAR E ORDENAR =========
    private void AplicarFiltrosEOrdenacao()
    {
        // 1. Inicia com a lista completa
        IEnumerable<Raca> query = Racas;

        // 2. Aplica filtro de Nome
        if (!string.IsNullOrWhiteSpace(filtroNome))
        {
            query = query.Where(r => r.NomeRaca.Contains(filtroNome, StringComparison.OrdinalIgnoreCase));
        }

        // 3. Aplica filtro de Status (Tipo)
        if (filtroStatus != "Todos")
        {
            query = query.Where(r => r.Status == filtroStatus);
        }

        // 4. Aplica a Ordenação
        switch (ordenacaoSelecionada)
        {
            case "nome_desc":
                query = query.OrderByDescending(r => r.NomeRaca);
                break;
            case "nome_asc":
            default:
                query = query.OrderBy(r => r.NomeRaca);
                break;
        }

        // 5. Atualiza a lista que será exibida na tela
        racasFiltradas = query.ToList();
    }
    // ========= FIM: NOVA LÓGICA PARA FILTRAR E ORDENAR =========


    private void AbrirModalNova()
    {
        racaAtual = new Raca();
        MensagemErro = string.Empty;
        mensagemSucesso = null;
        exibirModal = true;
    }

    private void AbrirModalEditar(Raca raca)
    {
        racaAtual = new Raca
            {
                Id = raca.Id,
                NomeRaca = raca.NomeRaca,
                Status = raca.Status
            };
        MensagemErro = string.Empty;
        mensagemSucesso = null;
        exibirModal = true;
    }

    private void FecharModal()
    {
        exibirModal = false;
        MensagemErro = string.Empty;
        mensagemSucesso = null;
    }

    private async Task SalvarRaca()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            if (racaAtual.Id == 0)
            {
                await RacaService.Criar(racaAtual.NomeRaca);
                mensagemSucesso = "Raça cadastrada com sucesso!";
            }
            else
            {
                await RacaService.AtualizarRacaPorId(racaAtual.Id, racaAtual.NomeRaca);
                mensagemSucesso = "Raça atualizada com sucesso!";
            }

            await CarregarRacas();

            StateHasChanged();
            await Task.Delay(1500);
            FecharModal();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private void ExcluirRaca(int id)
    {
        racaParaExcluir = Racas.FirstOrDefault(r => r.Id == id);
        if (racaParaExcluir != null)
        {
            exibirModalExclusao = true;
        }
    }

    private void FecharModalExclusao()
    {
        exibirModalExclusao = false;
        racaParaExcluir = null;
    }

    private async Task ConfirmarExclusao()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            await RacaService.ExcluirRaca(racaParaExcluir.Id);
            await CarregarRacas();

            FecharModalExclusao();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
            FecharModalExclusao();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private bool PodeEditarOuExcluir(Raca raca) => raca.Status == "Usuario";
}