@page "/animais"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService
@inject IRacaService RacaService

<div class="page-container">
    <h3 class="page-title">Lista de Animais</h3>
    <div class="current-date">@DateTime.Now.ToString("dd/MM/yyyy")</div>

    <div class="animal-actions">
        <button class="btn-action add" @onclick="AbrirModalNovo">
            <span class="plus-icon">+</span> Cadastrar novo animal
        </button>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (animais == null)
    {
        <p class="loading-message">Carregando...</p>
    }
    else if (!animais.Any())
    {
        <p class="empty-message">Nenhum animal cadastrado.</p>
    }
    else
    {
        <div class="animais-grid">
            @foreach (var animal in animais)
            {
                <div class="animal-card">
                    <div class="card-header">
                        <span class="animal-name">@animal.NomeAnimal (@animal.NumeroIdentificador)</span>
                        <span class="status-badge @animal.Status.ToLower()">@animal.Status</span>
                    </div>

                    <div class="card-details">
                        <div class="detail-item">
                            <span class="detail-label">Raça:</span>
                            <span class="detail-value">@animal.Raca</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Categoria:</span>
                            <span class="detail-value">@animal.CategoriaAnimal</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Nascimento:</span>
                            <span class="detail-value">@animal.DataNascimento</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Sexo:</span>
                            <span class="detail-value">@animal.Sexo</span>
                        </div>
                        @if (animal.Sexo == "Fêmea" && animal.CategoriaAnimal == "Vaca")
                        {
                            <div class="detail-item">
                                <span class="detail-label">Prenha:</span>
                                <span class="detail-value">@(animal.Prenha ? "Sim" : "Não")</span>
                            </div>
                        }
                    </div>

                    <div class="card-actions">
                        <button class="btn-action editar" @onclick="() => AbrirModalEditar(animal)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    <!-- Modal de Cadastro/Edição -->
    @if (exibirModal)
    {
        <div class="modal-overlay" @onclick="FecharModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>@(animal.Id == 0 ? "Cadastrar Animal" : "Editar Animal")</h3>

                <EditForm Model="animal" OnValidSubmit="SalvarAnimal">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="nomeAnimal">Nome do Animal:</label>
                        <InputText id="nomeAnimal" @bind-Value="animal.NomeAnimal" class="form-control" />
                        <ValidationMessage For="@(() => animal.NomeAnimal)" />
                    </div>

                    <div class="form-group">
                        <label for="numeroIdentificador">Brinco ou RFID:</label>
                        <InputText id="numeroIdentificador" @bind-Value="animal.NumeroIdentificador" class="form-control" />
                        <ValidationMessage For="@(() => animal.NumeroIdentificador)" />
                    </div>

                    <div class="form-group">
                        <label for="racaId">Raça:</label>
                        <InputSelect id="racaId" @bind-Value="animal.RacaId" class="form-control">
                            <option value="">Selecione uma raça...</option>
                            @foreach (var raca in racas)
                            {
                                <option value="@raca.Id">@raca.NomeRaca</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => animal.RacaId)" />
                    </div>

                    <div class="form-group">
                        <label for="dataNascimento">Data de Nascimento:</label>
                        <InputDate id="dataNascimento" @bind-Value="animal.DataNascimento" class="form-control" />
                    </div>

                    <div class="form-group">
                        <label for="sexo">Sexo:</label>
                        <InputSelect id="sexo" @bind-Value="animal.Sexo" @onchange="(e) => OnSexoChanged(e.Value.ToString())" class="form-control">
                            <option value="">Selecione...</option>
                            <option value="Macho">Macho</option>
                            <option value="Fêmea">Fêmea</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => animal.Sexo)" />
                    </div>

                    <div class="form-group">
                        <label for="categoriaAnimal">Categoria:</label>
                        <InputSelect id="categoriaAnimal" @bind-Value="animal.CategoriaAnimal" @onchange="(e) => OnCategoriaChanged(e.Value.ToString())" class="form-control">
                            <option value="">Selecione...</option>
                            <option value="Bezerro">Bezerro</option>
                            <option value="Novilha">Novilha</option>
                            <option value="Vaca">Vaca</option>
                            <option value="Touro">Touro</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => animal.CategoriaAnimal)" />
                    </div>

                    @if (MostrarOpcoesVaca)
                    {
                        <div class="form-group">
                            <div class="form-check">
                                <InputCheckbox id="prenha" @bind-Value="animal.Prenha" class="form-check-input" />
                                <label for="prenha" class="form-check-label">Prenha</label>
                            </div>
                        </div>
                    }

                    <div class="form-group">
                        <label for="status">Status:</label>
                        <InputSelect id="status" @bind-Value="animal.Status" class="form-control">
                            <option value="">Selecione...</option>
                            <option value="Ativo">Ativo</option>
                            <option value="Inativo">Inativo</option>
                            <option value="Baixa">Baixa</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => animal.Status)" />
                    </div>

                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Salvar</button>
                    </div>
                </EditForm>

                @if (mensagemSucesso != null)
                {
                    <div class="alert alert-success mt-3">@mensagemSucesso</div>
                }
            </div>
        </div>
    }
</div>

<style>
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-title {
        color: #023047;
        text-align: center;
        margin: 20px 0 30px;
    }

    .current-date {
        text-align: center;
        color: #666;
        margin-bottom: 30px;
        font-size: 16px;
        font-weight: 500;
    }

    .animal-actions {
        margin-bottom: 20px;
        display: flex;
        justify-content: flex-end;
    }

    .animais-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .animal-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-left: 4px solid #3a7ca5;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .plus-icon {
        margin-right: 8px;
        font-weight: bold;
        font-size: 18px;
    }

    .animal-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .status-badge {
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        font-weight: bold;
    }

        .status-badge.ativo {
            background-color: #8a5a44;
            color: white;
        }

        .status-badge.inativo {
            background-color: #ffc107;
            color: #212529;
        }

        .status-badge.baixa {
            background-color: #dc3545;
            color: white;
        }

    .card-details {
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        flex-wrap: wrap;
    }

    .detail-label {
        font-weight: 500;
        color: #555;
        min-width: 120px;
    }

    .detail-value {
        color: #333;
        text-align: right;
        flex: 1;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
    }

    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

        .btn-action.add {
            background-color: #8a5a44;
            color: white;
        }

        .btn-action.editar {
            background-color: #17a2b8;
            color: white;
        }

        .btn-action:hover {
            opacity: 0.9;
        }

    .loading-message, .empty-message {
        text-align: center;
        color: #666;
        margin: 40px 0;
        font-size: 16px;
    }

    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* Modal styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: white;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        width: 90%;
        max-width: 500px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            padding-bottom: 15px;
            border-bottom: 1px solid #eee;
            margin-bottom: 20px;
        }

    /* Form styles */
    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #333;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 16px;
    }

    .form-check {
        display: flex;
        align-items: center;
    }

    .form-check-input {
        margin-right: 10px;
    }

    .form-check-label {
        margin-bottom: 0;
    }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 25px;
    }

    .btn {
        padding: 10px 20px;
        border-radius: 5px;
        cursor: pointer;
        font-size: 16px;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
        border: none;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
        border: none;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .alert {
        padding: 10px 15px;
        border-radius: 4px;
        margin-top: 15px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .text-danger {
        color: #dc3545;
        font-size: 14px;
        margin-top: 5px;
        display: block;
    }

    .fas {
        font-size: 14px;
    }
</style>

@code {
    private List<Animal> animais;
    private Animal animal = new Animal();
    private bool exibirModal = false;
    private string mensagemSucesso;
    private int propriedadeId;
    private bool carregandoDados = true;
    private List<Raca> racas = new();

    private bool MostrarOpcoesVaca =>
        animal.Sexo == "Fêmea" && animal.CategoriaAnimal == "Vaca";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            var propriedade = PropriedadeService.ObterPropriedadeLogada();
            propriedadeId = propriedade.Id;

            // Carrega TODAS as raças ativas (Sistema + Usuario)
            racas = (await RacaService.ObterRacasOrdenadasPorNome())
                .Where(r => r.Status == "Sistema" || r.Status == "Usuario")
                .OrderBy(r => r.NomeRaca)
                .ToList();

            await CarregarAnimais();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarAnimais()
    {
        animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(propriedadeId);
    }

    private void AbrirModalNovo()
    {
        animal = new Animal
            {
                PropriedadeId = propriedadeId,
                DataNascimento = DateTime.Today,
                Status = "Ativo",
                Prenha = false
            };
        exibirModal = true;
        mensagemSucesso = null;
    }

    private void AbrirModalEditar(Animal a)
    {
        animal = new Animal
            {
                Id = a.Id,
                NomeAnimal = a.NomeAnimal,
                NumeroIdentificador = a.NumeroIdentificador,
                RacaId = a.RacaId,
                DataNascimento = a.DataNascimento,
                Sexo = a.Sexo,
                CategoriaAnimal = a.CategoriaAnimal,
                Prenha = a.Prenha,
                Status = a.Status,
                PropriedadeId = a.PropriedadeId
            };
        exibirModal = true;
        mensagemSucesso = null;
    }

    private async Task SalvarAnimal()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            // Garantir que só possa ser prenha se for vaca e fêmea
            if (!MostrarOpcoesVaca)
            {
                animal.Prenha = false;
            }

            if (animal.Id == 0)
                await AnimalService.CadastrarAnimalAsync(animal);
            else
                await AnimalService.AtualizarAnimalAsync(animal);

            mensagemSucesso = "Animal salvo com sucesso!";
            await CarregarAnimais();
            await Task.Delay(2000);
            FecharModal();
        }
        catch (Exception ex)
        {
            mensagemSucesso = $"Erro ao salvar animal: {ex.Message}";
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private void OnSexoChanged(string value)
    {
        animal.Sexo = value;
        if (!MostrarOpcoesVaca)
        {
            animal.Prenha = false;
        }
        StateHasChanged();
    }

    private void OnCategoriaChanged(string value)
    {
        animal.CategoriaAnimal = value;
        if (!MostrarOpcoesVaca)
        {
            animal.Prenha = false;
        }
        StateHasChanged();
    }

    private void FecharModal()
    {
        exibirModal = false;
        mensagemSucesso = null;
    }
}