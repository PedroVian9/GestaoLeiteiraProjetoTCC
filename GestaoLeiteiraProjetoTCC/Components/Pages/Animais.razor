@page "/animais"
@using System.Linq
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IAnimalService AnimalService
@inject IPropriedadeService PropriedadeService
@inject IRacaService RacaService

<div class="page-container">
    <div class="dashboard-header">
        <div class="header-content">
            <div class="welcome-section">
                <h1>Lista de Animais</h1>
                <p class="property-owner">Gerencie e visualize todo o seu rebanho</p>
            </div>
            <div class="header-date-section">
                <i class="fas fa-calendar-alt"></i>
                <span>@DateTime.Now.ToString("dd/MM/yyyy")</span>
            </div>
        </div>
    </div>

    <div class="filters-container">
        <div class="row align-items-end">
            <div class="col-md-4">
                <div class="form-group">
                    <label for="filtro-nome">Buscar por Nome ou Brinco</label>
                    <input id="filtro-nome" type="text" class="form-control" placeholder="Digite para buscar..."
                           @bind="filtroNome" @bind:event="oninput" @bind:after="AplicarFiltrosEOrdenacao" />
                </div>
            </div>

            <div class="col-md-2">
                <div class="form-group">
                    <label for="filtro-status">Status</label>
                    <select id="filtro-status" class="form-control" @bind="filtroStatus" @bind:after="AplicarFiltrosEOrdenacao">
                        <option value="Todos">Todos</option>
                        <option value="Ativo">Ativo</option>
                        <option value="Inativo">Inativo</option>
                        <option value="Baixa">Baixa</option>
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    <label for="filtro-categoria">Categoria</label>
                    <select id="filtro-categoria" class="form-control" @bind="filtroCategoria" @bind:after="AplicarFiltrosEOrdenacao">
                        <option value="Todos">Todas</option>
                        <option value="Bezerro">Bezerro</option>
                        <option value="Novilha">Novilha</option>
                        <option value="Vaca">Vaca</option>
                        <option value="Touro">Touro</option>
                    </select>
                </div>
            </div>

            <div class="col-md-3">
                <div class="form-group">
                    <label for="ordenacao">Ordenar por</label>
                    <select id="ordenacao" class="form-control" @bind="ordenacaoSelecionada" @bind:after="AplicarFiltrosEOrdenacao">
                        <option value="nome_asc">Nome (A-Z)</option>
                        <option value="data_desc">Mais Recentes (Nascimento)</option>
                        <option value="data_asc">Mais Antigos (Nascimento)</option>
                    </select>
                </div>
            </div>
        </div>
    </div>
    <div class="animal-actions">
        <button class="btn-action add" @onclick="AbrirModalNovo">
            <span class="plus-icon">+</span> Cadastrar novo animal
        </button>
    </div>

    @if (carregandoDados)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
            <p>Carregando dados...</p>
        </div>
    }
    else if (!animais.Any()) // Verifica se a lista principal está vazia
    {
        <div class="empty-message-container">
            <div class="empty-message">
                <i class="fas fa-paw"></i>
                <p>Nenhum animal cadastrado ainda.</p>
                <button class="btn btn-primary mt-3" @onclick="AbrirModalNovo">Cadastrar primeiro animal</button>
            </div>
        </div>
    }
    else if (!animaisFiltrados.Any()) // Verifica se a lista filtrada está vazia
    {
        <div class="empty-message-container">
            <div class="empty-message">
                <i class="fas fa-search"></i>
                <p>Nenhum animal encontrado para os filtros selecionados.</p>
            </div>
        </div>
    }
    else
    {
        <div class="animais-grid">
            @foreach (var animal in animaisFiltrados)
            {
                <div class="animal-card">
                    <div class="card-header">
                        <span class="animal-name">@animal.NomeAnimal (@animal.NumeroIdentificador)</span>
                        <span class="status-badge @animal.Status.ToLower()">@animal.Status</span>
                    </div>

                    <div class="card-details">
                        <div class="detail-item">
                            <span class="detail-label">Raça:</span>
                            <span class="detail-value">@(animal.Raca?.NomeRaca ?? "Não informada")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Categoria:</span>
                            <span class="detail-value">@animal.CategoriaAnimal</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Nascimento:</span>
                            <span class="detail-value">@animal.DataNascimento?.ToString("dd/MM/yyyy")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Sexo:</span>
                            <span class="detail-value">@animal.Sexo</span>
                        </div>
                        @if (animal.Sexo == "Fêmea" && animal.CategoriaAnimal == "Vaca")
                        {
                            <div class="detail-item">
                                <span class="detail-label">Prenha:</span>
                                <span class="detail-value">@(animal.Prenha ? "Sim" : "Não")</span>
                            </div>
                        }
                    </div>

                    <div class="card-actions">
                        <button class="btn-action editar" @onclick="() => AbrirModalEditar(animal)">
                            <i class="fas fa-edit"></i> Editar
                        </button>
                    </div>
                </div>
            }
        </div>
    }

    @if (exibirModal)
    {
        <div class="modal-overlay" @onclick="FecharModal">
            <div class="modal-content" @onclick:stopPropagation>
                <h3>@(animal.Id == 0 ? "Cadastrar Novo Animal" : "Editar Animal")</h3>

                <EditForm Model="animal" OnValidSubmit="SalvarAnimal">
                    <DataAnnotationsValidator />
                    <div class="form-grid">
                        <div class="form-group">
                            <label for="nomeAnimal">Nome do Animal</label>
                            <InputText id="nomeAnimal" @bind-Value="animal.NomeAnimal" class="form-control" placeholder="Digite o nome do animal..." />
                            <ValidationMessage For="@(() => animal.NomeAnimal)" />
                        </div>

                        <div class="form-group">
                            <label for="numeroIdentificador">Brinco / RFID</label>
                            <InputText id="numeroIdentificador" @bind-Value="animal.NumeroIdentificador" class="form-control" placeholder="Digite o número do brinco ou RFID..." />
                            <ValidationMessage For="@(() => animal.NumeroIdentificador)" />
                        </div>
                    </div>

                    <div class="form-grid-2-col">
                        <div class="form-group">
                            <label for="sexo">Sexo</label>
                            <InputSelect id="sexo" @bind-Value="animal.Sexo" @onchange="(e) => OnSexoChanged(e.Value.ToString())" class="form-control">
                                <option value="" disabled selected>Clique para selecionar o sexo...</option>
                                <option value="Macho">Macho</option>
                                <option value="Fêmea">Fêmea</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => animal.Sexo)" />
                        </div>

                        <div class="form-group">
                            <label for="categoriaAnimal">Categoria</label>
                            <InputSelect id="categoriaAnimal" @bind-Value="animal.CategoriaAnimal" @onchange="(e) => OnCategoriaChanged(e.Value.ToString())" class="form-control">
                                <option value="" disabled selected>Clique para selecionar a categoria...</option>
                                <option value="Bezerro">Bezerro</option>
                                <option value="Novilha">Novilha</option>
                                <option value="Vaca">Vaca</option>
                                <option value="Touro">Touro</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => animal.CategoriaAnimal)" />
                        </div>
                    </div>

                    <div class="form-grid-2-col">
                        <div class="form-group">
                            <label for="dataNascimento">Data de Nascimento</label>
                            <InputDate id="dataNascimento" @bind-Value="animal.DataNascimento" class="form-control" />
                            <ValidationMessage For="@(() => animal.DataNascimento)" />
                        </div>

                        <div class="form-group">
                            <label for="racaId">Raça</label>
                            <InputSelect id="racaId" @bind-Value="animal.RacaId" class="form-control">
                                <option value="0" disabled selected>Clique para selecionar uma raça...</option>
                                @foreach (var raca in racas)
                                {
                                    <option value="@raca.Id">@raca.NomeRaca</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => animal.RacaId)" />
                        </div>
                    </div>

                    <div class="form-grid-2-col">
                        <div class="form-group">
                            <label for="status">Status</label>
                            <InputSelect id="status" @bind-Value="animal.Status" class="form-control">
                                <option value="Ativo">Ativo</option>
                                <option value="Inativo">Inativo</option>
                                <option value="Baixa">Baixa</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => animal.Status)" />
                        </div>
                        @if (MostrarOpcoesVaca)
                        {
                            <div class="form-group checkbox-group">
                                <label for="prenha" class="form-check-label">Prenha</label>
                                <InputCheckbox id="prenha" @bind-Value="animal.Prenha" class="form-check-input" />
                            </div>
                        }
                    </div>

                    <div class="footer-actions">
                        <button type="button" class="btn btn-secondary" @onclick="FecharModal">Cancelar</button>
                        <button type="submit" class="btn btn-primary">Salvar</button>
                    </div>
                </EditForm>

                @if (mensagemSucesso != null)
                {
                    <div class="alert alert-success mt-3">@mensagemSucesso</div>
                }
            </div>
        </div>
    }
</div>

<style>
    /* Estilos gerais */
    .page-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    /* === ESTILOS DO NOVO CABEÇALHO === */
    .dashboard-header {
        background: white;
        border-radius: 8px;
        padding: 20px 25px;
        margin-bottom: 30px;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
        gap: 20px;
    }

    .welcome-section h1 {
        font-size: 2.2rem;
        color: #023047;
        margin: 0;
        font-weight: 700;
    }

    .property-owner {
        color: #666;
        font-size: 1.1rem;
        margin: 4px 0 0 0;
        font-weight: 400;
    }

    .header-date-section {
        font-size: 1rem;
        font-weight: 500;
        color: #4a5568;
        background-color: #f8f9fa;
        padding: 10px 16px;
        border-radius: 8px;
        display: flex;
        align-items: center;
        gap: 8px;
    }

    /* === ESTILOS DOS FILTROS (NOVOS) === */
    .filters-container {
        background: white;
        padding: 15px 25px 5px 25px;
        border-radius: 8px;
        margin-bottom: 20px;
        border: 1px solid #e0e7ee;
        box-shadow: 0 2px 8px rgba(0, 0, 0, 0.05);
    }

    .animal-actions {
        margin-bottom: 20px;
        display: flex;
        justify-content: flex-end;
    }

    .animais-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .animal-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        padding: 20px;
        border-left: 4px solid #3a7ca5;
    }

    .card-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    .plus-icon {
        margin-right: 8px;
        font-weight: bold;
        font-size: 18px;
    }

    .animal-name {
        font-weight: bold;
        font-size: 18px;
        color: #023047;
    }

    .status-badge {
        font-size: 12px;
        padding: 4px 10px;
        border-radius: 20px;
        font-weight: bold;
    }

        .status-badge.ativo {
            background-color: #28a745;
            color: white;
        }

        .status-badge.inativo {
            background-color: #ffc107;
            color: #212529;
        }

        .status-badge.baixa {
            background-color: #dc3545;
            color: white;
        }

    .card-details {
        margin-bottom: 15px;
    }

    .detail-item {
        display: flex;
        justify-content: space-between;
        margin-bottom: 8px;
        flex-wrap: wrap;
    }

    .detail-label {
        font-weight: 500;
        color: #555;
        min-width: 120px;
    }

    .detail-value {
        color: #333;
        text-align: right;
        flex: 1;
    }

    .card-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 15px;
    }

    .btn-action {
        padding: 10px 15px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        display: flex;
        align-items: center;
        gap: 8px;
        font-weight: 500;
    }

        .btn-action.add {
            background-color: #8a5a44;
            color: white;
        }

        .btn-action.editar {
            background-color: #17a2b8;
            color: white;
        }

        .btn-action:hover {
            opacity: 0.9;
        }

    .empty-message-container {
        background-color: white;
        border-radius: 8px;
        padding: 40px;
        border: 1px solid #e0e7ee;
        margin-top: 20px;
    }

    .empty-message {
        text-align: center;
        color: #6c757d;
    }

        .empty-message i {
            font-size: 3rem;
            margin-bottom: 15px;
            opacity: 0.5;
        }


    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 1000;
        color: white;
    }

    .spinner {
        border: 4px solid #f3f3f3;
        border-top: 4px solid #3498db;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        animation: spin 2s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    /* === MODAL & FORM STYLES === */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: rgba(0, 0, 0, 0.6);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .modal-content {
        background-color: #ffffff;
        padding: 25px 35px;
        border-radius: 15px;
        box-shadow: 0 5px 20px rgba(0, 0, 0, 0.15);
        width: 90%;
        max-width: 650px;
        max-height: 90vh;
        overflow-y: auto;
    }

        .modal-content h3 {
            margin-top: 0;
            color: #023047;
            font-size: 24px;
            font-weight: 600;
            padding-bottom: 20px;
            border-bottom: 1px solid #e0e7ee;
            margin-bottom: 25px;
            text-align: center;
        }

    .form-grid, .form-grid-2-col {
        display: grid;
        gap: 22px;
        margin-bottom: 22px;
    }

    .form-grid-2-col {
        grid-template-columns: 1fr 1fr;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 0; /* Remove a margem extra */
    }

        .form-group label {
            font-weight: 500;
            color: #4a5568;
            font-size: 14px;
        }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 1px solid #cbd5e0;
        border-radius: 8px;
        font-size: 15px;
        background-color: #f8f9fa;
        transition: border-color 0.2s ease, box-shadow 0.2s ease;
        box-sizing: border-box;
    }

        .form-control:focus {
            outline: none;
            border-color: #3a7ca5;
            background-color: #fff;
            box-shadow: 0 0 0 3px rgba(58, 124, 165, 0.15);
        }

        .form-control::placeholder {
            color: #a0aec0;
        }

    select.form-control {
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        padding-right: 40px;
        background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='%23343a40' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e");
        background-repeat: no-repeat;
        background-position: right 1rem center;
        background-size: 16px 12px;
    }

    .checkbox-group {
        display: flex;
        flex-direction: row-reverse;
        justify-content: flex-end;
        align-items: center;
        gap: 12px;
        padding-top: 30px;
    }

    .form-check-label {
        margin: 0;
        font-weight: 500;
        color: #4a5568;
        font-size: 14px;
        cursor: pointer;
    }

    .form-check-input {
        -webkit-appearance: none;
        appearance: none;
        background-color: #f8f9fa;
        margin: 0;
        font: inherit;
        color: currentColor;
        width: 1.25em;
        height: 1.25em;
        border: 1px solid #cbd5e0;
        border-radius: 5px;
        display: grid;
        place-content: center;
        cursor: pointer;
        transition: all 0.2s ease;
    }

        .form-check-input::before {
            content: "";
            width: 0.65em;
            height: 0.65em;
            transform: scale(0);
            transition: 120ms transform ease-in-out;
            box-shadow: inset 1em 1em #3a7ca5;
            transform-origin: bottom left;
            clip-path: polygon(14% 44%, 0 65%, 50% 100%, 100% 16%, 80% 0%, 43% 62%);
        }

        .form-check-input:checked {
            border-color: #3a7ca5;
        }

            .form-check-input:checked::before {
                transform: scale(1);
            }

        .form-check-input:focus-visible {
            outline: 2px solid #3a7ca5;
            outline-offset: 2px;
        }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        gap: 12px;
        margin-top: 30px;
        padding-top: 20px;
        border-top: 1px solid #e0e7ee;
    }

    .btn {
        padding: 12px 24px;
        border-radius: 8px;
        cursor: pointer;
        font-size: 16px;
        font-weight: 600;
        border: none;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #3a7ca5;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2c6284;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

    .alert {
        padding: 15px;
        border-radius: 8px;
        margin-top: 20px;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .validation-message {
        color: #e53e3e;
        font-size: 12px;
        margin-top: 4px;
    }
</style>

@code {
    // Lista principal que guarda todos os animais, servindo como cache
    private List<Animal> animais = new List<Animal>();
    // Nova lista para exibir os animais após filtros e ordenação
    private List<Animal> animaisFiltrados = new List<Animal>();

    private Animal animal = new Animal();
    private List<Raca> racas = new();

    private bool exibirModal = false;
    private string mensagemSucesso;
    private int propriedadeId;
    private bool carregandoDados = true;

    // ========= INÍCIO: NOVAS VARIÁVEIS DE ESTADO PARA FILTROS E ORDENAÇÃO =========
    private string filtroNome = string.Empty;
    private string filtroStatus = "Todos";
    private string filtroCategoria = "Todos";
    private string ordenacaoSelecionada = "nome_asc"; // Valor padrão para ordenação
    // ========= FIM: NOVAS VARIÁVEIS DE ESTADO =========


    private bool MostrarOpcoesVaca =>
        animal.Sexo == "Fêmea" && animal.CategoriaAnimal == "Vaca";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            carregandoDados = true;
            StateHasChanged();

            var propriedade = PropriedadeService.ObterPropriedadeLogada();
            propriedadeId = propriedade.Id;

            racas = (await RacaService.ObterRacasOrdenadasPorNome())
                .Where(r => r.Status == "Sistema" || r.Status == "Usuario")
                .OrderBy(r => r.NomeRaca)
                .ToList();

            await CarregarAnimais();
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private async Task CarregarAnimais()
    {
        animais = await AnimalService.ObterAnimaisDaPropriedadeAsync(propriedadeId);

        if (animais != null && racas != null)
        {
            foreach (var animal in animais)
            {
                var racaEncontrada = racas.FirstOrDefault(r => r.Id == animal.RacaId);
                animal.Raca = racaEncontrada;
            }
        }
        // Após carregar, aplica os filtros e ordenação iniciais
        AplicarFiltrosEOrdenacao();
    }

    // ========= INÍCIO: NOVA LÓGICA PARA FILTRAR E ORDENAR =========
    private void AplicarFiltrosEOrdenacao()
    {
        // 1. Começa com a lista completa de animais
        IEnumerable<Animal> query = animais;

        // 2. Aplica filtro de Nome/Brinco
        if (!string.IsNullOrWhiteSpace(filtroNome))
        {
            query = query.Where(a =>
                a.NomeAnimal.Contains(filtroNome, StringComparison.OrdinalIgnoreCase) ||
                a.NumeroIdentificador.Contains(filtroNome, StringComparison.OrdinalIgnoreCase));
        }

        // 3. Aplica filtro de Status
        if (filtroStatus != "Todos")
        {
            query = query.Where(a => a.Status == filtroStatus);
        }

        // 4. Aplica filtro de Categoria
        if (filtroCategoria != "Todos")
        {
            query = query.Where(a => a.CategoriaAnimal == filtroCategoria);
        }

        // 5. Aplica a Ordenação
        switch (ordenacaoSelecionada)
        {
            case "data_desc":
                query = query.OrderByDescending(a => a.DataNascimento);
                break;
            case "data_asc":
                query = query.OrderBy(a => a.DataNascimento);
                break;
            case "nome_asc":
            default:
                query = query.OrderBy(a => a.NomeAnimal);
                break;
        }

        // 6. Atualiza a lista que será exibida na tela
        animaisFiltrados = query.ToList();

        // O StateHasChanged() é chamado automaticamente pelo @bind:after
    }
    // ========= FIM: NOVA LÓGICA PARA FILTRAR E ORDENAR =========


    private void AbrirModalNovo()
    {
        animal = new Animal
            {
                PropriedadeId = propriedadeId,
                DataNascimento = DateTime.Today,
                Status = "Ativo",
                Prenha = false,
                Sexo = "",
                CategoriaAnimal = "",
                RacaId = 0
            };
        exibirModal = true;
        mensagemSucesso = null;
    }

    private void AbrirModalEditar(Animal a)
    {
        // Cria uma cópia do animal para edição, para não alterar a lista principal em caso de cancelamento
        animal = new Animal
            {
                Id = a.Id,
                NomeAnimal = a.NomeAnimal,
                NumeroIdentificador = a.NumeroIdentificador,
                RacaId = a.RacaId,
                DataNascimento = a.DataNascimento,
                Sexo = a.Sexo,
                CategoriaAnimal = a.CategoriaAnimal,
                Prenha = a.Prenha,
                Status = a.Status,
                PropriedadeId = a.PropriedadeId
            };
        exibirModal = true;
        mensagemSucesso = null;
    }

    private async Task SalvarAnimal()
    {
        try
        {
            carregandoDados = true; // Mostra o spinner global
            exibirModal = false; // Fecha o modal imediatamente para o usuário ver o spinner
            StateHasChanged();

            if (!MostrarOpcoesVaca)
            {
                animal.Prenha = false;
            }

            if (animal.Id == 0)
                await AnimalService.CadastrarAnimalAsync(animal);
            else
                await AnimalService.AtualizarAnimalAsync(animal);

            await CarregarAnimais(); // Recarrega e aplica os filtros novamente
        }
        catch (Exception ex)
        {
            // Lógica para tratar erro (ex: exibir um toast/notificação de erro)
            Console.WriteLine($"Erro ao salvar animal: {ex.Message}");
            // Reabre o modal em caso de erro para o usuário não perder os dados
            exibirModal = true;
        }
        finally
        {
            carregandoDados = false;
            StateHasChanged();
        }
    }

    private void OnSexoChanged(string value)
    {
        animal.Sexo = value;
        if (!MostrarOpcoesVaca)
        {
            animal.Prenha = false;
        }
        StateHasChanged();
    }

    private void OnCategoriaChanged(string value)
    {
        animal.CategoriaAnimal = value;
        if (!MostrarOpcoesVaca)
        {
            animal.Prenha = false;
        }
        StateHasChanged();
    }

    private void FecharModal()
    {
        exibirModal = false;
        mensagemSucesso = null;
    }
}