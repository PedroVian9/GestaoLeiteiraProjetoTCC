@page "/cadastrar-propriedade"

@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService
@inject NavigationManager Navigation

<div class="container-cadastro">
    <div class="content-box">
        <h3 class="title">Cadastro de Nova Propriedade</h3>

        <EditForm Model="propriedade" OnValidSubmit="CriarPropriedade">
            <DataAnnotationsValidator />

            <div class="form-grid-container">
                <div class="form-column">
                    <h4 class="section-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>
                        Dados do(a) Proprietário(a)
                    </h4>
                    <div class="form-group">
                        <label for="nomeProprietario">Nome do(a) Proprietário(a):</label>
                        <InputText id="nomeProprietario" @bind-Value="propriedade.NomeProprietario" class="form-control" autocomplete="off" />
                        <ValidationMessage For="@(() => propriedade.NomeProprietario)" />
                    </div>
                    <div class="form-group">
                        <label for="nomeSocial">Nome Social (Opcional):</label>
                        <InputText id="nomeSocial" @bind-Value="propriedade.NomeSocial" class="form-control" autocomplete="off" />
                    </div>
                    <div class="form-group">
                        <label for="sexo">Sexo:</label>
                        <InputSelect id="sexo" @bind-Value="propriedade.Sexo" class="form-control">
                            <option value="0" disabled selected>Selecione...</option>
                            <option value="1">Masculino</option>
                            <option value="2">Feminino</option>
                            <option value="3">Não Deseja Informar</option>
                        </InputSelect>
                        <ValidationMessage For="@(() => propriedade.Sexo)" />
                    </div>
                </div>

                <div class="form-column">
                    <h4 class="section-title">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path><polyline points="9 22 9 12 15 12 15 22"></polyline></svg>
                        Dados da Propriedade
                    </h4>
                    <div class="form-group">
                        <label for="nomePropriedade">Nome da Propriedade:</label>
                        <InputText id="nomePropriedade" @bind-Value="propriedade.NomePropriedade" class="form-control" autocomplete="off" />
                        <ValidationMessage For="@(() => propriedade.NomePropriedade)" />
                    </div>
                    <div class="form-group">
                        <label for="localizacao">Localização:</label>
                        <InputText id="localizacao" @bind-Value="propriedade.Localizacao" class="form-control" autocomplete="off" />
                        <ValidationMessage For="@(() => propriedade.Localizacao)" />
                    </div>
                    <div class="form-group-inline">
                        <div class="form-group area-input">
                            <label for="areaTotal">Área Total:</label>
                            <InputNumber id="areaTotal" @bind-Value="propriedade.AreaTotal" class="form-control" autocomplete="off" />
                            <ValidationMessage For="@(() => propriedade.AreaTotal)" />
                        </div>
                        <div class="form-group unidade-select">
                            <label for="tipoUnidade">Unidade:</label>
                            <InputSelect id="tipoUnidade" @bind-Value="propriedade.TipoUnidade" class="form-control">
                                <option value="0" disabled selected>...</option>
                                <option value="1">Alqueire</option>
                                <option value="2">Hectare</option>
                            </InputSelect>
                            <ValidationMessage For="@(() => propriedade.TipoUnidade)" />
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-section-full-width">
                <h4 class="section-title">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect><path d="M7 11V7a5 5 0 0 1 10 0v4"></path></svg>
                    Segurança
                </h4>
                <div class="form-group-inline">
                    <div class="form-group">
                        <label for="senha">Senha:</label>
                        <InputText id="senha" @bind-Value="propriedade.Senha" type="password" class="form-control" />
                        <ValidationMessage For="@(() => propriedade.Senha)" />
                    </div>
                    <div class="form-group">
                        <label for="confirmarSenha">Confirmar Senha:</label>
                        <InputText id="confirmarSenha" @bind-Value="propriedade.ConfirmarSenha" type="password" class="form-control" />
                        <ValidationMessage For="@(() => propriedade.ConfirmarSenha)" />
                    </div>
                </div>
            </div>

            <div class="footer-actions">
                <button type="button" class="btn btn-secondary" @onclick="Voltar" disabled="@isSubmitting">Voltar</button>
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span style="margin-left: 5px;">Cadastrando...</span>
                    }
                    else
                    {
                        <span>Cadastrar</span>
                    }
                </button>
            </div>
        </EditForm>

        @if (mensagemSucesso != null)
        {
            <div class="message success">@mensagemSucesso</div>
        }
    </div>
</div>

<style>
    /* Estilos gerais */
    body, html {
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container-cadastro {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 40px 20px;
        background: #f0f2f5;
    }

    /* Caixa de conteúdo principal, agora mais larga */
    .content-box {
        background-color: #023047;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        padding: 40px;
        width: 100%;
        max-width: 900px; /* Aumentado para acomodar as colunas */
        color: white;
    }

    .title {
        text-align: center;
        color: white;
        margin-bottom: 30px;
        font-weight: 700;
        font-size: 28px;
    }

    /* NOVO: Container do Grid */
    .form-grid-container {
        display: grid;
        grid-template-columns: 1fr 1fr; /* Duas colunas de largura igual */
        gap: 40px; /* Espaço entre as colunas */
        margin-bottom: 20px;
    }

    .section-title {
        display: flex;
        align-items: center;
        gap: 10px;
        font-size: 1.1rem;
        font-weight: 600;
        color: #e9ecef;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #0a4d68;
    }

        .section-title svg {
            width: 20px;
            height: 20px;
            stroke: #8ecae6;
        }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
        margin-bottom: 20px;
    }

    /* Grid para campos lado-a-lado (área e senha) */
    .form-group-inline {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 16px;
        align-items: start;
    }

        .form-group-inline .area-input {
            grid-column: 1 / 3;
        }
        /* Ajuste para o campo de área */
        .form-group-inline .unidade-select {
            grid-column: 1 / 3;
        }

    @@media (min-width: 600px) { /* Em telas maiores, coloca lado a lado */
        .form-group-inline .area-input

    {
        grid-template-columns: 2fr 1fr;
        grid-column: auto;
    }

    .form-group-inline .unidade-select {
        grid-template-columns: 2fr 1fr;
        grid-column: auto;
    }

    }


    .form-group label {
        font-weight: 600;
        color: #e9ecef;
        font-size: 14px;
    }

    .form-control {
        padding: 12px 16px;
        border: 1px solid #ced4da;
        border-radius: 8px;
        font-size: 16px;
        width: 100%;
        background-color: #fff;
        transition: all 0.3s ease;
        color: #333;
    }

        .form-control:focus {
            outline: none;
            border-color: #219ebc;
            box-shadow: 0 0 0 3px rgba(33, 158, 188, 0.25);
        }

    .validation-message {
        color: #e63946;
        font-size: 13px;
        margin-top: 4px;
    }

    .btn {
        padding: 12px 25px;
        border-radius: 8px;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s ease;
        border: none;
        font-size: 16px;
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .btn-primary {
        background-color: #219ebc;
        color: white;
    }

        .btn-primary:hover:not(:disabled) {
            background-color: #1b85a3;
        }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

        .btn-secondary:hover:not(:disabled) {
            background-color: #5a6268;
        }

    .btn:disabled {
        background-color: #adb5bd;
        cursor: not-allowed;
    }

    .footer-actions {
        display: flex;
        justify-content: flex-end;
        margin-top: 30px;
        gap: 15px;
    }

    .message.success {
        color: #2a9d8f;
        text-align: center;
        margin-top: 25px;
        font-weight: 600;
        background-color: #e8f5e9;
        padding: 15px;
        border-radius: 8px;
        border: 1px solid #a5d6a7;
    }

    .spinner-border {
        display: inline-block;
        width: 1.25rem;
        height: 1.25rem;
        vertical-align: text-bottom;
        border: .2em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: .75s linear infinite spin;
    }
    @@keyframes spin {
        to

    {
        transform: rotate(360deg);
    }

    }

    /* NOVO: Media Query para responsividade */
    @@media (max-width: 768px) {
        .form-grid-container

    {
        grid-template-columns: 1fr; /* Uma coluna em telas pequenas */
        gap: 0;
    }

    .form-group-inline {
        grid-template-columns: 1fr; /* Empilha os campos de senha */
    }

    .content-box {
        padding: 25px;
    }

    }
</style>

@code {
    private Propriedade propriedade = new Propriedade();
    private string mensagemSucesso;
    private bool isSubmitting = false;

    private async Task CriarPropriedade()
    {
        isSubmitting = true;
        mensagemSucesso = null;

        try
        {
            await PropriedadeService.CadastrarPropriedadeAsync(propriedade);
            mensagemSucesso = "Propriedade cadastrada com sucesso!";
            propriedade = new Propriedade();
            StateHasChanged();

            await Task.Delay(2000);
            Voltar();
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Voltar()
    {
        Navigation.NavigateTo("/");
    }
}