@page "/"
@using GestaoLeiteiraProjetoTCC.Models
@using GestaoLeiteiraProjetoTCC.Services.Interfaces
@inject IPropriedadeService PropriedadeService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="container-login">
    <div class="content-box animate-fade-in">
        <div class="title">
            <img src="/Icons/drink64.png" alt="Logo" />
            <h4 class="welcome-message">Bem-vindo ao Gestão Leiteira</h4>
        </div>

        @if (mostrarLogin)
        {
            <div class="login-section">
                <div class="header-with-back">
                    <h4>@propriedadeSelecionada.NomePropriedade</h4>
                </div>

                <div class="form-group">
                    <label for="senha">Digite a senha:</label>
                    <input type="password" id="senha" class="form-control" @bind="senha" @onkeypress="SenhaKeyPress" disabled="@isLoggingIn" />
                </div>

                <div class="message @(mensagemErro ? "error" : "success")">
                    @mensagem
                </div>

                <div class="buttons">
                    <button class="back-button" @onclick="VoltarParaSelecao" disabled="@isLoggingIn">Voltar</button>
                    <button class="btn btn-primary btn-login" @onclick="ConfirmarLogin" disabled="@isLoggingIn">
                        @if (isLoggingIn)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span class="sr-only">Entrando...</span>
                        }
                        else
                        {
                            <span>Entrar</span>
                        }
                    </button>
                </div>
            </div>
        }
        else
        {
            <h5 class="subtitle">Selecione uma Propriedade</h5>

            @if (propriedades == null)
            {
                <div class="loading">
                    <div class="spinner"></div>
                    <p>Carregando propriedades...</p>
                </div>
            }
            else if (propriedades.Count == 0)
            {
                <div class="empty-state">
                    <p class="erroEncontrarPropriedade">Nenhuma propriedade encontrada.</p>
                    <button class="btn btn-primary" @onclick="IrParaCadastro">Cadastrar Primeira Propriedade</button>
                </div>
            }
            else
            {
                <div class="propriedades-lista">
                    @foreach (var propriedade in propriedades)
                    {
                        <button class="propriedade-item" @onclick="() => SelecionarPropriedade(propriedade)">
                            @propriedade.NomePropriedade
                        </button>
                    }
                </div>

                <div class="footer-actions">
                    <button class="btn btn-secondary" @onclick="IrParaCadastro">Cadastrar Nova Propriedade</button>
                </div>
            }
        }
    </div>
</div>

<style>
    .container-login {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
        padding: 20px;
        background-color: #f0f2f5; /* Fundo um pouco mais claro para destacar o box */
    }

    .content-box {
        background-color: #023047;
        color: white;
        border-radius: 12px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
        padding: 40px;
        width: 100%;
        max-width: 500px;
    }

    .animate-fade-in {
        animation: fadeIn 0.5s ease-in-out;
    }

    @@keyframes fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(-10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .title {
        text-align: center;
        margin-bottom: 25px;
    }

        .title img {
            margin-bottom: 10px;
        }

    .welcome-message {
        font-weight: 300;
        color: white; /* Cor de destaque */
    }

    .subtitle {
        text-align: center;
        margin-bottom: 25px;
        font-weight: 400;
    }

    .propriedades-lista {
        display: flex;
        flex-direction: column;
        gap: 12px;
        margin-bottom: 25px;
    }

    .propriedade-item {
        width: 100%;
        padding: 15px;
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 6px;
        text-align: center;
        font-size: 1rem;
        color: #212529;
        cursor: pointer;
        transition: all 0.2s ease;
        font-weight: 500;
    }

        .propriedade-item:hover {
            background-color: #e9ecef;
            transform: translateY(-3px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .btn {
        padding: 12px 24px;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
        border: none;
        font-size: 1rem;
    }

    .btn-primary {
        background-color: #219ebc;
        color: white;
    }

        .btn-primary:hover {
            background-color: #1b85a3;
        }

        .btn-primary:disabled {
            background-color: #8ecae6;
            cursor: not-allowed;
        }

    .btn-secondary {
        background-color: #219ebc;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #1b85a3;
        }

    .login-section {
        display: flex;
        flex-direction: column;
        gap: 20px;
    }

    .header-with-back h4 {
        text-align: center;
        font-weight: 500;
        color: white;
    }

    .buttons {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 10px;
    }

    .back-button {
        background: none;
        border: none;
        color: #8ecae6;
        cursor: pointer;
        padding: 5px;
        font-weight: 500;
        transition: color 0.2s ease;
    }

        .back-button:hover {
            color: white;
        }

        .back-button:disabled {
            color: #6c757d;
            cursor: not-allowed;
        }

    .form-group {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .form-control {
        padding: 12px;
        border: 1px solid #ced4da;
        border-radius: 6px;
        font-size: 1rem;
        background-color: #fff;
        color: #333;
    }

        .form-control:focus {
            border-color: #219ebc;
            box-shadow: 0 0 0 0.2rem rgba(33, 158, 188, 0.25);
        }

    .message {
        min-height: 24px;
        font-size: 0.9rem;
        text-align: center;
        font-weight: 500;
    }

    .error {
        color: #e63946;
    }

    .success {
        color: #a7c957;
    }

    .loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 15px;
        color: white;
        padding: 20px 0;
    }

    .spinner {
        border: 4px solid rgba(255, 255, 255, 0.3);
        border-radius: 50%;
        border-top: 4px solid white;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    .empty-state {
        text-align: center;
        padding: 20px 0;
    }

    .erroEncontrarPropriedade {
        margin-bottom: 20px;
    }

    .footer-actions {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

    .btn-login {
        min-width: 90px;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: .2em;
    }

    .spinner-border {
        display: inline-block;
        vertical-align: text-bottom;
        border: .25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: .75s linear infinite spin;
    }
</style>

@code {
    private List<Propriedade> propriedades; // Inicializa como nulo para o estado de carregamento
    private Propriedade propriedadeSelecionada;
    private string senha = string.Empty;
    private bool mostrarLogin = false;
    private string mensagem = string.Empty;
    private bool mensagemErro = false;
    private bool isLoggingIn = false; // Novo estado para controlar o loading do botão

    protected override async Task OnInitializedAsync()
    {
        // Simula um pequeno delay para ver o efeito de loading
        await Task.Delay(500);
        propriedades = await PropriedadeService.ObterTodasPropriedadesAsync();
    }

    private void SelecionarPropriedade(Propriedade propriedade)
    {
        propriedadeSelecionada = propriedade;
        senha = string.Empty;
        mensagem = string.Empty;
        mostrarLogin = true;
    }

    private void VoltarParaSelecao()
    {
        mostrarLogin = false;
        propriedadeSelecionada = null;
        senha = string.Empty;
        mensagem = string.Empty;
    }

    private async Task ConfirmarLogin()
    {
        if (isLoggingIn) return;

        isLoggingIn = true;
        mensagem = string.Empty;

        if (propriedadeSelecionada != null)
        {
            if (string.IsNullOrWhiteSpace(senha))
            {
                mensagem = "Por favor, digite a senha";
                mensagemErro = true;
                isLoggingIn = false;
                return;
            }

            try
            {
                // Simula a chamada de rede
                await Task.Delay(1000);

                var propriedadeLogada = await PropriedadeService.LoginPropriedadeAsync(
                    propriedadeSelecionada.NomeProprietario,
                    senha
                );

                if (propriedadeLogada != null)
                {
                    mensagem = "Login realizado com sucesso!";
                    mensagemErro = false;
                    StateHasChanged();
                    await Task.Delay(500);

                    await RedirecionarBaseadoNoDispositivo();
                }
                else
                {
                    mensagem = "Credenciais inválidas";
                    mensagemErro = true;
                    senha = string.Empty;
                }
            }
            catch (Exception ex)
            {
                mensagem = "Erro ao realizar login: " + ex.Message;
                mensagemErro = true;
            }
        }

        isLoggingIn = false;
    }

    private async Task RedirecionarBaseadoNoDispositivo()
    {
        try
        {
            bool isMobile = await JSRuntime.InvokeAsync<bool>("isMobileDevice");

            if (isMobile)
            {
                Navigation.NavigateTo("/producao-leiteira");
            }
            else
            {
                Navigation.NavigateTo("/inicio");
            }
        }
        catch
        {
            Navigation.NavigateTo("/inicio"); // Fallback
        }
    }

    private async Task SenhaKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ConfirmarLogin();
        }
    }

    private void IrParaCadastro()
    {
        Navigation.NavigateTo("/cadastrar-propriedade");
    }
}